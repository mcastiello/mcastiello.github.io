{"version":3,"sources":["views/pages/TextStyle.tsx","views/PropsTable.tsx","views/ComponentLink.tsx"],"names":["props","TextStyleDoc","page","Pages","PixiText","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","useState","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","ComponentLink","className","url","setUrl"],"mappings":"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","file":"static/js/87.00fa3f2a.chunk.js","sourcesContent":["import React from 'react';\nimport { Pages } from '../../pages';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst props: PropsDefinition = [\n  ['align', false, 'TextAlign', 'TextAlign.Left', 'Text alignment'],\n  ['breakWords', false, 'boolean', 'false', 'Whether or not to break a work when going to a new line'],\n  ['dropShadow', false, 'boolean', 'false', 'Flag to add a drop shadow to the text'],\n  ['dropShadowAlpha', false, 'number', '1', 'Alpha value of the drop shadow'],\n  ['dropShadowAngle', false, 'number', 'Math.PI / 6', 'Angle of the drop shadow'],\n  ['dropShadowBlur', false, 'number', '0', 'Blur amount of the drop shadow'],\n  ['dropShadowColor', false, 'string', \"'black'\", 'Color of the drop shadow'],\n  ['dropShadowDistance', false, 'number', '5', 'Distance from the text of the drop shadow'],\n  ['fill', false, 'string', \"'black'\", 'Color used to fill the text'],\n  ['fillGradientType', false, 'TextGradient', 'TextGradient.LinearHorizontal', 'Direction of the color gradient'],\n  ['fillGradientStops', false, 'string[]', '[]', 'list of colors used to create a gradient to fill the text'],\n  ['fontFamily', false, 'string', \"'Arial'\", 'Font family'],\n  ['fontSize', false, 'number', '26', 'Font size in pixels'],\n  ['fontStyle', false, 'FontStyle', 'FontStyle.Normal', 'Font style (check type for details)'],\n  ['fontVariant', false, 'FontVariant', 'FontVariant.Normal', 'Font variant (check type for details)'],\n  ['fontWeight', false, 'FontWeight', 'FontWeight.Normal', 'Font weight  (check type for details)'],\n  ['leading', false, 'number', '0', 'The space between lines'],\n  ['letterSpacing', false, 'number', '0', 'Amount of space added between letters'],\n  ['lineHeight', false, 'number', '0', 'Height of each line'],\n  ['lineJoin', false, 'LineJoin', 'LineJoin.Miter', 'Shape to be used at the corners of the text path'],\n  ['miterLimit', false, 'number', '10', 'Limit of the miter shape'],\n  ['padding', false, 'number', '0', 'padding of the text from the borders'],\n  ['stroke', false, 'string', \"'black'\", 'Color used to stroke the borders of the text'],\n  ['strokeThickness', false, 'number', '0', 'Thickness of the text borders'],\n  ['textBaseline', false, 'TextBaseline', 'TextBaseline.Alphabetic', 'Type of text baseline alignment'],\n  ['trim', false, 'boolean', 'false', 'Trim the edges of the resulting texture'],\n  ['whiteSpace', false, 'TextWhiteLine', 'TextWhiteLine.Pre', 'Determines whether newlines and spaces are collapsed or preserved'],\n  ['wordWrap', false, 'boolean', 'false', 'Whether to go or not to a new line when the `wordWrapWidth` is reached'],\n  ['wordWrapWidth', false, 'number', '100', 'Size after which the text needs to go to a newline']\n];\nconst TextStyleDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>TextStyle</StyledTitle>\n      <StyledIntroduction>\n        Style used by the <ComponentLink page={Pages.PixiText} /> component to draw the text.\n      </StyledIntroduction>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n    </>\n  );\n};\n\nexport default TextStyleDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}