{"version":3,"sources":["views/pages/SepiaEffect.tsx","views/PageIndex.tsx","views/pages/Effects.tsx"],"names":["props","effectProps","textures","galaxy","ship","SepiaEffectExample","enabled","useState","trackSize","setTrackSize","resize","useCallback","size","width","reducer","position","useReducer","update","onUpdate","onResize","texture","x","alignY","SepiaEffectDoc","setEnabled","toggle","style","textAlign","marginRight","defaultChecked","onChange","height","src","buildIndex","page","a","items","getPageChildren","pages","i","length","getComponentUrl","url","push","href","key","text","external","PageIndex","showTitle","links","setLinks","useEffect","then","amountEffectProps","Effects","Pages"],"mappings":"kOAQMA,EAAsB,YAAOC,eAE7BC,EAAW,CACfC,OAAQ,6BACRC,KAAM,iCAGFC,EAAqD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACxCC,mBAAS,GAD+B,mBACnEC,EADmE,KACxDC,EADwD,KAEpEC,EAASC,uBAAY,SAACC,GAAD,OAAUH,EAAaG,EAAKC,MAAQ,OAAM,IAC/DC,EAAUH,uBAAY,SAACI,GAAD,OAAeA,EAAW,GAAKP,IAAW,CAACA,IAHG,EAI/CQ,qBAAWF,EAAS,GAJ2B,mBAInEC,EAJmE,KAIzDE,EAJyD,KAM1E,OACE,kBAAC,IAAD,CAAYf,SAAUA,EAAUgB,SAAUD,EAAQE,SAAUT,GAC1D,kBAAC,IAAD,CAAkBU,QAAS,WAC3B,kBAAC,IAAD,CAAYA,QAAS,OAAQC,EAAGN,EAAW,IAAKO,OAAQ,KACxD,kBAAC,IAAD,CAAmBhB,QAASA,GAC1B,kBAAC,IAAD,SA8BOiB,UAxBkB,WAAO,IAAD,EACPhB,oBAAS,GADF,mBAC9BD,EAD8B,KACrBkB,EADqB,KAE/BC,EAASd,uBAAY,kBAAMa,GAAYlB,KAAU,CAACA,IAExD,OACE,oCACE,kBAAC,IAAD,oBACA,kBAAC,IAAD,4DACA,kBAAC,IAAD,CAAOoB,MAAO,CAAEC,UAAW,UACzB,0BAAMD,MAAO,CAAEE,YAAa,KAAO,iBACnC,kBAAC,IAAD,CAAQC,gBAAc,EAACC,SAAUL,KAEnC,kBAAC,IAAD,CAAOC,MAAO,CAAEK,OAAQ,MACtB,kBAAC1B,EAAD,CAAoBC,QAASA,KAE/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAY0B,IAAK,8CAEnB,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAYhC,MAAOA,O,sGC/CnBiC,EAAU,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACXC,EAAwB,GADb,SAEGC,YAAgBH,GAFnB,OAEXI,EAFW,OAIRC,EAAI,EAJI,YAIDA,EAAID,EAAME,QAJT,iCAKGC,YAAgBH,EAAMC,IALzB,OAKTG,EALS,OAOfN,EAAMO,KAAK,kBAAC,IAAD,CAAoBC,KAAI,WAAMF,GAAOG,IAAKP,EAAMC,GAAIO,KAAMR,EAAMC,GAAIQ,UAAQ,KAPxE,QAIiBR,IAJjB,gDAUVH,GAVU,4CAAH,sDA4BDY,IAf6B,SAAC,GAAgC,IAA9Bd,EAA6B,EAA7BA,KAA6B,IAAvBe,iBAAuB,WAChD1C,mBAAyB,IADuB,mBACnE2C,EADmE,KAC5DC,EAD4D,KAO1E,OAJAC,qBAAU,WACRnB,EAAWC,GAAMmB,KAAKF,KACrB,CAACjB,IAGF,oCACGe,GAAa,kBAAC,IAAD,mBAAqBf,IAClCgB,K,gCC3BP,0IAKajD,EAA+B,CAC1C,CAAC,YAAY,EAAO,UAAW,OAAQ,wEACvC,CAAC,WAAW,EAAO,UAAW,OAAQ,uDAG3BqD,EAAkC,CAC7C,CAAC,UAAU,EAAO,SAAU,MAAO,2BADU,OAExCrD,GAOQsD,UAJW,WACxB,OAAO,kBAAC,IAAD,CAAWrB,KAAMsB,IAAMD","file":"static/js/29.c307b9c7.chunk.js","sourcesContent":["import { Block, Toggle } from 'framework7-react';\nimport { PixiCanvas, PixiSprite, PixiTilingSprite, ColorMatrixFilter, SepiaEffect } from 'pixi-reactive';\nimport React, { useCallback, useReducer, useState } from 'react';\nimport { effectProps } from './Effects';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst props: PropsDefinition = [...effectProps];\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nconst SepiaEffectExample: React.FC<{ enabled: boolean }> = ({ enabled }) => {\n  const [trackSize, setTrackSize] = useState(0);\n  const resize = useCallback((size) => setTrackSize(size.width + 300), []);\n  const reducer = useCallback((position) => (position + 1) % trackSize, [trackSize]);\n  const [position, update] = useReducer(reducer, 0);\n\n  return (\n    <PixiCanvas textures={textures} onUpdate={update} onResize={resize}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite texture={'ship'} x={position - 150} alignY={0.5} />\n      <ColorMatrixFilter enabled={enabled}>\n        <SepiaEffect />\n      </ColorMatrixFilter>\n    </PixiCanvas>\n  );\n};\n\nconst SepiaEffectDoc: React.FC = () => {\n  const [enabled, setEnabled] = useState(true);\n  const toggle = useCallback(() => setEnabled(!enabled), [enabled]);\n\n  return (\n    <>\n      <StyledTitle>SepiaEffect</StyledTitle>\n      <StyledIntroduction>This effect will convert the scene to a sepia tone.</StyledIntroduction>\n      <Block style={{ textAlign: 'right' }}>\n        <span style={{ marginRight: 10 }}>{'Toggle Filter'}</span>\n        <Toggle defaultChecked onChange={toggle} />\n      </Block>\n      <Block style={{ height: 300 }}>\n        <SepiaEffectExample enabled={enabled} />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/SepiaEffectExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n    </>\n  );\n};\n\nexport default SepiaEffectDoc;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { getComponentUrl, getPageChildren, PageIndexProps, Pages } from '../pages';\nimport { StyledTitle, IndexComponentLink } from './StyledComponents';\n\nconst buildIndex = async (page: Pages) => {\n  const items: ReactElement[] = [];\n  const pages = await getPageChildren(page);\n\n  for (let i = 0; i < pages.length; i++) {\n    const url = await getComponentUrl(pages[i]);\n\n    items.push(<IndexComponentLink href={`#${url}`} key={pages[i]} text={pages[i]} external />);\n  }\n\n  return items;\n};\n\nconst PageIndex: React.FC<PageIndexProps> = ({ page, showTitle = true }) => {\n  const [links, setLinks] = useState<ReactElement[]>([]);\n\n  useEffect(() => {\n    buildIndex(page).then(setLinks);\n  }, [page]);\n\n  return (\n    <>\n      {showTitle && <StyledTitle>{`All ${page}`}</StyledTitle>}\n      {links}\n    </>\n  );\n};\n\nexport default PageIndex;\n","import React from 'react';\nimport { Pages } from '../../pages';\nimport PageIndex from '../PageIndex';\nimport { PropsDefinition } from '../PropsTable';\n\nexport const effectProps: PropsDefinition = [\n  ['multiply', false, 'boolean', 'true', 'Whether the effect should be multiplied onto the color matrix or not'],\n  ['enabled', false, 'boolean', 'true', 'Whether the effect is applied to the filter or not']\n];\n\nexport const amountEffectProps: PropsDefinition = [\n  ['amount', false, 'number', '0.5', 'Strength of the effect'],\n    ...effectProps\n];\n\nconst Effects: React.FC = () => {\n  return <PageIndex page={Pages.Effects} />;\n};\n\nexport default Effects;\n"],"sourceRoot":""}