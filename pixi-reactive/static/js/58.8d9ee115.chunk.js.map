{"version":3,"sources":["views/pages/UseKeyboard.tsx","views/PropsTable.tsx","views/CodeViewer.tsx","views/ComponentLink.tsx"],"names":["Axis","textures","galaxy","ship","reducer","position","action","axis","X","x","value","Y","y","Ship","useKeyboard","SpecialKeys","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","up","down","left","right","frameId","useContext","AnimationContext","useReducer","update","useEffect","texture","alignX","alignY","UseKeyboardExample","UseKeyboardDoc","page","Pages","Key","style","height","src","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","then","prop","index","f7","size","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","setCode","fetch","response","darcula","language","showLineNumbers","ComponentLink","className","url","setUrl"],"mappings":"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","file":"static/js/58.8d9ee115.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiSprite, PixiTilingSprite, useKeyboard, AnimationContext, SpecialKeys } from 'pixi-reactive';\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport { StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledTitle } from '../StyledComponents';\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nenum Axis {\n  X,\n  Y\n}\n\ntype Action = {\n  axis: Axis;\n  value: number;\n};\n\ntype Position = {\n  x: number;\n  y: number;\n};\n\nconst reducer = (position: Position, action: Action): Position => {\n  switch (action.axis) {\n    case Axis.X:\n      return { ...position, x: position.x + action.value };\n    case Axis.Y:\n      return { ...position, y: position.y + action.value };\n  }\n};\n\nconst Ship: React.FC = () => {\n  const [up, down, left, right] = useKeyboard(SpecialKeys.ArrowUp, SpecialKeys.ArrowDown, SpecialKeys.ArrowLeft, SpecialKeys.ArrowRight);\n  const { frameId } = useContext(AnimationContext);\n  const [position, update] = useReducer(reducer, { x: 0, y: 0 });\n\n  useEffect(() => {\n    if (up) {\n      update({ axis: Axis.Y, value: -1 });\n    }\n    if (down) {\n      update({ axis: Axis.Y, value: 1 });\n    }\n    if (left) {\n      update({ axis: Axis.X, value: -1 });\n    }\n    if (right) {\n      update({ axis: Axis.X, value: 1 });\n    }\n  }, [up, down, left, right, frameId]);\n\n  return <PixiSprite texture={'ship'} x={position.x} y={position.y} alignX={0.5} alignY={0.5} />;\n};\n\nconst UseKeyboardExample: React.FC = () => {\n  return (\n    <PixiCanvas textures={textures}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <Ship />\n    </PixiCanvas>\n  );\n};\n\nconst UseKeyboardDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>useKeyboard</StyledTitle>\n      <StyledIntroduction>\n        This hook will help you handle keyboard events. It takes one or more <ComponentLink page={Pages.Key} /> parameters and will return\n        an array of boolean values. When a value is set to <StyledCode>true</StyledCode>, the character is currently pressed, when it switch\n        to <StyledCode>false</StyledCode> it means that it has been released.<br/>\n        Try to use your keyboard arrows to move the ship in the example below:\n\n      </StyledIntroduction>\n      <Block style={{ height: 400 }}>\n        <UseKeyboardExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/UseKeyboardExample.tsx'} />\n      </Block>\n    </>\n  );\n};\n\nexport default UseKeyboardDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}