{"version":3,"sources":["views/PropsTable.tsx","views/PageIndex.tsx","views/pages/Filters.tsx","views/pages/AlphaFilter.tsx"],"names":["pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","useEffect","then","prop","index","key","f7","size","has","text","href","get","external","split","content","buildIndex","page","items","url","push","PageIndex","showTitle","links","setLinks","filterProps","Filters","alphaProps","textures","galaxy","ship","AlphaFilterExample","enabled","trackSize","setTrackSize","resize","useCallback","width","reducer","position","useReducer","updatePosition","alpha","direction","value","updateAlpha","update","onUpdate","onResize","texture","x","alignY","AlphaFilterDoc","setEnabled","toggle","style","textAlign","marginRight","defaultChecked","onChange","height","src"],"mappings":"6ZASO,IAkBHA,EAlBSC,EAAaC,IAAOC,KAAV,KAoBjBC,EAAY,uCAAG,kCAAAC,EAAA,yDACdL,EADc,iCAEGM,YAAgBC,IAAMC,OAFzB,OAEXC,EAFW,OAGXC,EAAM,IAAIC,IAEPC,EAAI,EALI,YAKDA,EAAIH,EAAMI,QALT,iCAMIC,YAAgBL,EAAMG,IAN1B,OAMTG,EANS,OAQfL,EAAIM,IAAIP,EAAMG,GAAd,WAAsBG,IARP,QAKiBH,IALjB,uBAWjBZ,EAAaU,EAXI,iCAcZV,GAdY,4CAAH,qDAkEHiB,IAjD0C,SAAC,GAAoB,IAAD,IAAjBC,aAAiB,MAAT,GAAS,IACjDC,qBADiD,mBACpEC,EADoE,KAC7DC,EAD6D,KAO3E,OAJAC,qBAAU,WACRlB,IAAemB,KAAKF,KACnB,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,+BACE,4BACE,oCACA,wCACA,oCACA,uCACA,6CAGJ,+BACGH,EAAMR,KAAI,SAACc,EAAMC,GAChB,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAK,IACV,4BAAKA,EAAK,GAAK,kBAAC,IAAD,CAAMG,GAAI,gBAAiBC,KAAM,KAAS,MACzD,4BACE,8BACGR,GAASA,EAAMS,IAAIL,EAAK,IACvB,kBAAC,IAAD,CAAYM,KAAMN,EAAK,GAAIO,KAAMX,EAAMY,IAAIR,EAAK,IAAcS,UAAQ,IAEtET,EAAK,KAIX,4BACE,8BAAOA,EAAK,KAEd,4BAAeA,EAAK,GApEjBU,MAAM,KAEZxB,KAAI,SAACyB,EAASV,GACzB,OAAIA,EAAQ,IAAM,EACT,0BAAMC,IAAKD,GAAQU,GAEnB,kBAAClC,EAAD,CAAYyB,IAAKD,GAAQU,iB,sGClBhCC,EAAU,uCAAG,WAAOC,GAAP,qBAAAhC,EAAA,6DACXiC,EAAwB,GADb,SAEGhC,YAAgB+B,GAFnB,OAEX5B,EAFW,OAIRG,EAAI,EAJI,YAIDA,EAAIH,EAAMI,QAJT,iCAKGC,YAAgBL,EAAMG,IALzB,OAKT2B,EALS,OAOfD,EAAME,KAAK,kBAAC,IAAD,CAAoBT,KAAI,WAAMQ,GAAOb,IAAKjB,EAAMG,GAAIkB,KAAMrB,EAAMG,GAAIqB,UAAQ,KAPxE,QAIiBrB,IAJjB,gDAUV0B,GAVU,4CAAH,sDA4BDG,IAf6B,SAAC,GAAgC,IAA9BJ,EAA6B,EAA7BA,KAA6B,IAAvBK,iBAAuB,WAChDvB,mBAAyB,IADuB,mBACnEwB,EADmE,KAC5DC,EAD4D,KAO1E,OAJAtB,qBAAU,WACRc,EAAWC,GAAMd,KAAKqB,KACrB,CAACP,IAGF,oCACGK,GAAa,kBAAC,IAAD,mBAAqBL,IAClCM,K,gCC3BP,wFAKaE,EAA+B,CAC1C,CAAC,aAAa,EAAO,YAAa,oBAAqB,kDACvD,CAAC,WAAW,EAAO,UAAW,OAAQ,kFACtC,CAAC,WAAW,EAAO,UAAW,OAAQ,uDACtC,CACE,WACA,EACA,SACA,IACA,wKAEF,CAAC,cAAc,EAAO,SAAU,IAAK,iCAOxBC,UAJW,WACxB,OAAO,kBAAC,IAAD,CAAWT,KAAM9B,IAAMuC,Y,8HCZ1BC,EAA2B,CAAI,CAAC,SAAS,EAAO,SAAU,IAAK,+CAApC,mBAAsFF,gBAEjHG,EAAW,CACfC,OAAQ,6BACRC,KAAM,iCAGFC,EAAqD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACxCjC,mBAAS,GAD+B,mBACnEkC,EADmE,KACxDC,EADwD,KAEpEC,EAASC,uBAAY,SAAC5B,GAAD,OAAU0B,EAAa1B,EAAK6B,MAAQ,OAAM,IAC/DC,EAAUF,uBAAY,SAACG,GAAD,OAAeA,EAAW,GAAKN,IAAW,CAACA,IAHG,EAIvCO,qBAAWF,EAAS,GAJmB,mBAInEC,EAJmE,KAIzDE,EAJyD,OAK7CD,sBAC3B,SAACE,GACC,IAAMC,EAAYD,EAAME,MAAQ,IAAOF,EAAME,MAAQ,IAAOF,EAAMC,UAAYD,EAAMC,UACpF,MAAO,CACLC,MAAOF,EAAME,OAASD,EAAY,IAAO,IACzCA,eAGJ,CAAEC,MAAO,GAAKD,WAAW,IAb+C,mBAKnED,EALmE,KAK5DG,EAL4D,KAgBpEC,EAASV,uBAAY,WACzBK,IACAI,MACC,IAEH,OACE,kBAAC,IAAD,CAAYjB,SAAUA,EAAUmB,SAAUD,EAAQE,SAAUb,GAC1D,kBAAC,IAAD,CAAkBc,QAAS,WAC3B,kBAAC,IAAD,CAAYA,QAAS,OAAQC,EAAGX,EAAW,IAAKY,OAAQ,IACtD,kBAAC,IAAD,CAAanB,QAASA,EAASU,MAAOA,EAAME,WAiCrCQ,UA3BkB,WAAO,IAAD,EACPrD,oBAAS,GADF,mBAC9BiC,EAD8B,KACrBqB,EADqB,KAE/BC,EAASlB,uBAAY,kBAAMiB,GAAYrB,KAAU,CAACA,IAExD,OACE,oCACE,kBAAC,IAAD,oBACA,kBAAC,IAAD,gMAIA,kBAAC,IAAD,CAAOuB,MAAO,CAAEC,UAAW,UACzB,0BAAMD,MAAO,CAAEE,YAAa,KAAO,iBACnC,kBAAC,IAAD,CAAQC,gBAAc,EAACC,SAAUL,KAEnC,kBAAC,IAAD,CAAOC,MAAO,CAAEK,OAAQ,MACtB,kBAAC7B,EAAD,CAAoBC,QAASA,KAE/B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAY6B,IAAK,8CAEnB,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAY/D,MAAO6B","file":"static/js/22.ab222ebf.chunk.js","sourcesContent":["import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { getComponentUrl, getPageChildren, PageIndexProps, Pages } from '../pages';\nimport { StyledTitle, IndexComponentLink } from './StyledComponents';\n\nconst buildIndex = async (page: Pages) => {\n  const items: ReactElement[] = [];\n  const pages = await getPageChildren(page);\n\n  for (let i = 0; i < pages.length; i++) {\n    const url = await getComponentUrl(pages[i]);\n\n    items.push(<IndexComponentLink href={`#${url}`} key={pages[i]} text={pages[i]} external />);\n  }\n\n  return items;\n};\n\nconst PageIndex: React.FC<PageIndexProps> = ({ page, showTitle = true }) => {\n  const [links, setLinks] = useState<ReactElement[]>([]);\n\n  useEffect(() => {\n    buildIndex(page).then(setLinks);\n  }, [page]);\n\n  return (\n    <>\n      {showTitle && <StyledTitle>{`All ${page}`}</StyledTitle>}\n      {links}\n    </>\n  );\n};\n\nexport default PageIndex;\n","import React from 'react';\nimport { Pages } from '../../pages';\nimport PageIndex from '../PageIndex';\nimport { PropsDefinition } from '../PropsTable';\n\nexport const filterProps: PropsDefinition = [\n  ['blendMode', false, 'BlendMode', 'BlendModes.Normal', 'Mode used to blend the filter with the element'],\n  ['autoFit', false, 'boolean', 'true', 'If enabled, it will fit the filter area into boundaries for better performance'],\n  ['enabled', false, 'boolean', 'true', 'Whether the filter is applied to the element or not'],\n  [\n    'padding',\n    false,\n    'number',\n    '0',\n    'Some filters require extra space to breath such as a blur. Increasing this will add extra width and height to the bounds of the object that the filter is applied to'\n  ],\n  ['resolution', false, 'number', '1', 'The resolution of the filter']\n];\n\nconst Filters: React.FC = () => {\n  return <PageIndex page={Pages.Filters} />;\n};\n\nexport default Filters;\n","import { Block, Toggle } from 'framework7-react';\nimport { PixiCanvas, PixiSprite, PixiTilingSprite, AlphaFilter } from 'pixi-reactive';\nimport React, { useCallback, useReducer, useState } from 'react';\nimport { filterProps } from './Filters';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst alphaProps: PropsDefinition = [['alpha', false, 'number', '1', 'Alpha value assigned to the parent element'], ...filterProps];\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nconst AlphaFilterExample: React.FC<{ enabled: boolean }> = ({ enabled }) => {\n  const [trackSize, setTrackSize] = useState(0);\n  const resize = useCallback((size) => setTrackSize(size.width + 300), []);\n  const reducer = useCallback((position) => (position + 1) % trackSize, [trackSize]);\n  const [position, updatePosition] = useReducer(reducer, 0);\n  const [alpha, updateAlpha] = useReducer(\n    (alpha) => {\n      const direction = alpha.value > 0.8 || alpha.value < 0.2 ? !alpha.direction : alpha.direction;\n      return {\n        value: alpha.value + (direction ? 0.1 : -0.1),\n        direction\n      };\n    },\n    { value: 0.5, direction: true }\n  );\n\n  const update = useCallback(() => {\n    updatePosition();\n    updateAlpha();\n  }, []);\n\n  return (\n    <PixiCanvas textures={textures} onUpdate={update} onResize={resize}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite texture={'ship'} x={position - 150} alignY={0.5}>\n        <AlphaFilter enabled={enabled} alpha={alpha.value} />\n      </PixiSprite>\n    </PixiCanvas>\n  );\n};\n\nconst AlphaFilterDoc: React.FC = () => {\n  const [enabled, setEnabled] = useState(true);\n  const toggle = useCallback(() => setEnabled(!enabled), [enabled]);\n\n  return (\n    <>\n      <StyledTitle>AlphaFilter</StyledTitle>\n      <StyledIntroduction>\n        Apply a filter to reduce or increase the value of the alpha channel of the element to witch it is applied. The alpha channel is\n        responsible of the opacity/transparency of the element.\n      </StyledIntroduction>\n      <Block style={{ textAlign: 'right' }}>\n        <span style={{ marginRight: 10 }}>{'Toggle Filter'}</span>\n        <Toggle defaultChecked onChange={toggle} />\n      </Block>\n      <Block style={{ height: 300 }}>\n        <AlphaFilterExample enabled={enabled} />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/AlphaFilterExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={alphaProps} />\n    </>\n  );\n};\n\nexport default AlphaFilterDoc;\n"],"sourceRoot":""}