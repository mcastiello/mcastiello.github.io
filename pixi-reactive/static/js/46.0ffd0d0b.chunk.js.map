{"version":3,"sources":["views/pages/NoiseFilter.tsx","views/PropsTable.tsx","views/CodeViewer.tsx","views/PageIndex.tsx","views/pages/Filters.tsx"],"names":["noiseProps","filterProps","filter","prop","textures","galaxy","ship","NoiseFilterExample","useState","trackSize","setTrackSize","resize","useCallback","size","width","reducer","position","useReducer","update","onUpdate","onResize","texture","x","alignY","noise","NoiseFilterDoc","style","height","src","props","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","types","setTypes","useEffect","then","index","f7","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","setCode","fetch","response","darcula","language","showLineNumbers","buildIndex","page","items","url","push","PageIndex","showTitle","links","setLinks","Filters"],"mappings":"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","file":"static/js/46.0ffd0d0b.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiSprite, PixiTilingSprite, NoiseFilter } from 'pixi-reactive';\nimport React, { useCallback, useReducer, useState } from 'react';\nimport { filterProps } from './Filters';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst noiseProps: PropsDefinition = [\n  ['noise', false, 'number', '0.5', 'Value of the noise applied'],\n  ...filterProps.filter((prop) => prop[0] !== 'enabled')\n];\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nconst NoiseFilterExample: React.FC = () => {\n  const [trackSize, setTrackSize] = useState(0);\n  const resize = useCallback((size) => setTrackSize(size.width + 300), []);\n  const reducer = useCallback((position) => (position + 1) % trackSize, [trackSize]);\n  const [position, update] = useReducer(reducer, 0);\n\n  return (\n    <PixiCanvas textures={textures} onUpdate={update} onResize={resize}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite texture={'ship'} x={position - 150} alignY={0.5}>\n        <NoiseFilter noise={1} />\n      </PixiSprite>\n    </PixiCanvas>\n  );\n};\n\nconst NoiseFilterDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>NoiseFilter</StyledTitle>\n      <StyledIntroduction>\n        Apply a noise filter to the element.\n        <br />\n        It looks like there's some kind of issue enabling/disabling this filter. I'm investigating it, but for now the filter cannot be\n        disabled or removed once applied.\n      </StyledIntroduction>\n      <Block style={{ height: 300 }}>\n        <NoiseFilterExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/NoiseFilterExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={noiseProps} />\n    </>\n  );\n};\n\nexport default NoiseFilterDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { getComponentUrl, getPageChildren, PageIndexProps, Pages } from '../pages';\nimport { StyledTitle, IndexComponentLink } from './StyledComponents';\n\nconst buildIndex = async (page: Pages) => {\n  const items: ReactElement[] = [];\n  const pages = await getPageChildren(page);\n\n  for (let i = 0; i < pages.length; i++) {\n    const url = await getComponentUrl(pages[i]);\n\n    items.push(<IndexComponentLink href={`#${url}`} key={pages[i]} text={pages[i]} external />);\n  }\n\n  return items;\n};\n\nconst PageIndex: React.FC<PageIndexProps> = ({ page, showTitle = true }) => {\n  const [links, setLinks] = useState<ReactElement[]>([]);\n\n  useEffect(() => {\n    buildIndex(page).then(setLinks);\n  }, [page]);\n\n  return (\n    <>\n      {showTitle && <StyledTitle>{`All ${page}`}</StyledTitle>}\n      {links}\n    </>\n  );\n};\n\nexport default PageIndex;\n","import React from 'react';\nimport { Pages } from '../../pages';\nimport PageIndex from '../PageIndex';\nimport { PropsDefinition } from '../PropsTable';\n\nexport const filterProps: PropsDefinition = [\n  ['blendMode', false, 'BlendMode', 'BlendModes.Normal', 'Mode used to blend the filter with the element'],\n  ['autoFit', false, 'boolean', 'true', 'If enabled, it will fit the filter area into boundaries for better performance'],\n  ['enabled', false, 'boolean', 'true', 'Whether the filter is applied to the element or not'],\n  [\n    'padding',\n    false,\n    'number',\n    '0',\n    'Some filters require extra space to breath such as a blur. Increasing this will add extra width and height to the ' +\n    'bounds of the object that the filter is applied to'\n  ],\n  ['resolution', false, 'number', '1', 'The resolution of the filter']\n];\n\nconst Filters: React.FC = () => {\n  return <PageIndex page={Pages.Filters} />;\n};\n\nexport default Filters;\n"],"sourceRoot":""}