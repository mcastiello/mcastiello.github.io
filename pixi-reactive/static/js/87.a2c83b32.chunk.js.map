{"version":3,"sources":["views/PropsTable.tsx","views/pages/UseAnimatedProgress.tsx"],"names":["pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","useEffect","then","prop","index","key","f7","size","has","text","href","get","external","split","content","textures","galaxy","ship","Ship","width","useContext","RenderingContext","position","updatePosition","progress","useAnimatedProgress","texture","x","alignY","UseAnimatedProgressExample","UseAnimatedProgressDoc","style","height","src"],"mappings":"0ZASO,IAkBHA,EAlBSC,EAAaC,IAAOC,KAAV,KAoBjBC,EAAY,uCAAG,kCAAAC,EAAA,yDACdL,EADc,iCAEGM,YAAgBC,IAAMC,OAFzB,OAEXC,EAFW,OAGXC,EAAM,IAAIC,IAEPC,EAAI,EALI,YAKDA,EAAIH,EAAMI,QALT,iCAMIC,YAAgBL,EAAMG,IAN1B,OAMTG,EANS,OAQfL,EAAIM,IAAIP,EAAMG,GAAd,WAAsBG,IARP,QAKiBH,IALjB,uBAWjBZ,EAAaU,EAXI,iCAcZV,GAdY,4CAAH,qDAkEHiB,IAjD0C,SAAC,GAAoB,IAAD,IAAjBC,aAAiB,MAAT,GAAS,IACjDC,qBADiD,mBACpEC,EADoE,KAC7DC,EAD6D,KAO3E,OAJAC,qBAAU,WACRlB,IAAemB,KAAKF,KACnB,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,+BACE,4BACE,oCACA,wCACA,oCACA,uCACA,6CAGJ,+BACGH,EAAMR,KAAI,SAACc,EAAMC,GAChB,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAK,IACV,4BAAKA,EAAK,GAAK,kBAAC,IAAD,CAAMG,GAAI,gBAAiBC,KAAM,KAAS,MACzD,4BACE,8BACGR,GAASA,EAAMS,IAAIL,EAAK,IACvB,kBAAC,IAAD,CAAYM,KAAMN,EAAK,GAAIO,KAAMX,EAAMY,IAAIR,EAAK,IAAcS,UAAQ,IAEtET,EAAK,KAIX,4BACE,8BAAOA,EAAK,KAEd,4BAAeA,EAAK,GApEjBU,MAAM,KAEZxB,KAAI,SAACyB,EAASV,GACzB,OAAIA,EAAQ,IAAM,EACT,0BAAMC,IAAKD,GAAQU,GAEnB,kBAAClC,EAAD,CAAYyB,IAAKD,GAAQU,iB,mJCfhCC,EAAW,CACfC,OAAQ,6BACRC,KAAM,iCAGKC,EAAiB,WAAO,IAC3BC,EAAUC,qBAAWC,MAArBF,MAD0B,EAECrB,mBAAS,GAFV,mBAE3BwB,EAF2B,KAEjBC,EAFiB,KAG5BC,EAAWC,aAAoB,GAAKN,GAAO,GAMjD,OAJAlB,qBAAU,WACRsB,GAAgBJ,EAAQ,KAAOK,KAC9B,CAACA,EAAUL,IAEP,kBAAC,IAAD,CAAYO,QAAS,OAAQC,EAAGL,EAAW,IAAKM,OAAQ,MAG3DC,EAAuC,WAC3C,OACE,kBAAC,IAAD,CAAYd,SAAUA,GACpB,kBAAC,IAAD,CAAkBW,QAAS,WAC3B,kBAACR,EAAD,QAyBSY,UApB0B,WACvC,OACE,oCACE,kBAAC,IAAD,4BACA,kBAAC,IAAD,4CACsC,kBAAC,IAAD,iBADtC,+DACoI,IAClI,kBAAC,IAAD,aAFF,8DAE0F,kBAAC,IAAD,aAF1F,KAEyH,6BAFzH,4CAG2C,kBAAC,IAAD,UAH3C,QAG0E,kBAAC,IAAD,UAH1E,8DAMA,kBAAC,IAAD,CAAOC,MAAO,CAAEC,OAAQ,MACtB,kBAACH,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYI,IAAK","file":"static/js/87.a2c83b32.chunk.js","sourcesContent":["import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiSprite, PixiTilingSprite, RenderingContext, useAnimatedProgress } from 'pixi-reactive';\nimport React, { useContext, useEffect, useState } from 'react';\nimport CodeViewer from '../CodeViewer';\nimport { StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledTitle } from '../StyledComponents';\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nexport const Ship: React.FC = () => {\n  const { width } = useContext(RenderingContext);\n  const [position, updatePosition] = useState(0);\n  const progress = useAnimatedProgress(10 * width, true);\n\n  useEffect(() => {\n    updatePosition((width + 300) * progress);\n  }, [progress, width]);\n\n  return <PixiSprite texture={'ship'} x={position - 150} alignY={0.5} />;\n};\n\nconst UseAnimatedProgressExample: React.FC = () => {\n  return (\n    <PixiCanvas textures={textures}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <Ship />\n    </PixiCanvas>\n  );\n};\n\nconst UseAnimatedProgressDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>useAnimatedProgress</StyledTitle>\n      <StyledIntroduction>\n        This hook will take as parameters a <StyledCode>duration</StyledCode> in milliseconds of the whole animation and an optional flag{' '}\n        <StyledCode>loop</StyledCode> that will reset the animation each time it ends is set to <StyledCode>true</StyledCode>. <br />\n        The return value will be a value between <StyledCode>0</StyledCode> and <StyledCode>1</StyledCode> representing the progress of the\n        animation in percentage.\n      </StyledIntroduction>\n      <Block style={{ height: 300 }}>\n        <UseAnimatedProgressExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/UseAnimatedProgressExample.tsx'} />\n      </Block>\n    </>\n  );\n};\n\nexport default UseAnimatedProgressDoc;\n"],"sourceRoot":""}