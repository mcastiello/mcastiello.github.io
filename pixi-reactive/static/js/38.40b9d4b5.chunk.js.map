{"version":3,"sources":["views/pages/PixiRenderTexture.tsx","views/ComponentLink.tsx"],"names":["textureProps","textures","galaxy","ship","PixiRenderTextureExample","useReducer","previousPosition","position","update","onUpdate","texture","alignY","alignX","width","height","x","PixiRenderTextureDoc","page","Pages","PixiSprite","PixiAnimatedSprite","PixiTilingSprite","PixiCanvas","style","src","props","ComponentLink","className","dispatch","useContext","DispatchContext","useState","url","setUrl","useEffect","getComponentUrl","then","href","key","text","onClick"],"mappings":"gOASMA,EAAgC,CACpC,CAAC,QAAQ,EAAO,SAAU,OAAQ,6BAClC,CAAC,SAAS,EAAM,SAAU,OAAQ,kCAClC,CAAC,UAAU,EAAM,SAAU,OAAQ,oCAG/BC,EAAW,CACfC,OAAQ,6BACRC,KAAM,iCAGFC,EAAqC,WAAO,IAAD,EACpBC,sBAAW,SAACC,GAAD,OAAuBA,EAAmB,GAAK,MAAK,GAD3C,mBACxCC,EADwC,KAC9BC,EAD8B,KAE/C,OACE,kBAAC,IAAD,CAAYP,SAAUA,EAAUQ,SAAUD,GACxC,kBAAC,IAAD,CAAkBE,QAAS,WAC3B,kBAAC,IAAD,CAAYC,OAAQ,GAAKC,OAAQ,IAC/B,kBAAC,IAAD,CAAmBC,MAAO,IAAKC,OAAQ,KACrC,kBAAC,IAAD,CAAYJ,QAAS,OAAQK,EAAGR,EAAW,IAAKI,OAAQ,SAiCnDK,UA1BwB,WACrC,OACE,oCACE,kBAAC,IAAD,0BACA,kBAAC,IAAD,wMAEgE,kBAAC,IAAD,CAAeC,KAAMC,IAAMC,aAF3F,MAE6G,IAC3G,kBAAC,IAAD,CAAeF,KAAMC,IAAME,qBAH7B,SAGyD,kBAAC,IAAD,CAAeH,KAAMC,IAAMG,mBAHpF,wUAOE,6BAPF,gFAQ+E,kBAAC,IAAD,CAAeJ,KAAMC,IAAMI,aAR1G,KAUA,kBAAC,IAAD,CAAOC,MAAO,CAAET,OAAQ,MACtB,kBAACV,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYoB,IAAK,oDAEnB,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAYC,MAAOzB,O,6ECxCV0B,IAXsD,SAAC,GAAyB,IAAvBT,EAAsB,EAAtBA,KAAMU,EAAgB,EAAhBA,UACpEC,EAAaC,qBAAWC,KAAxBF,SADoF,EAEtEG,qBAFsE,mBAErFC,EAFqF,KAEhFC,EAFgF,KAQ5F,OAJAC,qBAAU,WACRC,YAAgBlB,GAAMmB,MAAK,SAAAJ,GAAG,OAAIC,EAAO,IAAD,OAAKD,SAC5C,CAACf,IAEG,kBAAC,IAAD,CAAqBU,UAAWA,EAAWU,KAAML,EAAKM,IAAKrB,EAAMsB,KAAMtB,EAAMuB,QAAS,kBAAMZ,EAASX","file":"static/js/38.40b9d4b5.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiTilingSprite, PixiRenderTexture, PixiSprite } from 'pixi-reactive';\nimport React, { useReducer } from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst textureProps: PropsDefinition = [\n  ['name', false, 'string', 'null', 'Name or ID of the texture'],\n  ['width', true, 'number', 'null', 'Width of the rendering context'],\n  ['height', true, 'number', 'null', 'Height of the rendering context']\n];\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nconst PixiRenderTextureExample: React.FC = () => {\n  const [position, update] = useReducer((previousPosition) => (previousPosition + 1) % 600, 0);\n  return (\n    <PixiCanvas textures={textures} onUpdate={update}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite alignY={0.5} alignX={0.5}>\n        <PixiRenderTexture width={300} height={120}>\n          <PixiSprite texture={'ship'} x={position - 150} alignY={0.5} />\n        </PixiRenderTexture>\n      </PixiSprite>\n    </PixiCanvas>\n  );\n};\n\nconst PixiRenderTextureDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>PixiRenderTexture</StyledTitle>\n      <StyledIntroduction>\n        The render texture creates a new scene/context that will be rendered into a texture and, as such, can be used as a source for all\n        those components that can accept a texture as a child, like a <ComponentLink page={Pages.PixiSprite} />, a{' '}\n        <ComponentLink page={Pages.PixiAnimatedSprite} /> or a <ComponentLink page={Pages.PixiTilingSprite} />. The use of this particular\n        texture is recommended when you need to create dynamically a complex scene that will stay mostly static for the rest of the game.\n        Rendering inside a texture is expensive, but if it is used to collapse together different objects into a single sprite, it can be a\n        good way to optimise performances.\n        <br />\n        Once you added the texture to its container, you can than use it as the main <ComponentLink page={Pages.PixiCanvas} />.\n      </StyledIntroduction>\n      <Block style={{ height: 300 }}>\n        <PixiRenderTextureExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PixiRenderTextureExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={textureProps} />\n    </>\n  );\n};\n\nexport default PixiRenderTextureDoc;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { DispatchContext, getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const { dispatch } = useContext(DispatchContext);\n  const [url, setUrl] = useState<string|undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then(url => setUrl(`#${url}`))\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} onClick={() => dispatch(page)} />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}