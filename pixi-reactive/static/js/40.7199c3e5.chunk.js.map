{"version":3,"sources":["views/pages/PointerContext.tsx","views/ComponentLink.tsx"],"names":["props","textures","galaxy","ship","Ship","useContext","PointerContext","x","y","over","texture","alignX","undefined","alignY","anchorX","anchorY","PointerContextExample","PointerContextDoc","page","Pages","PixiCanvas","style","height","src","ComponentLink","className","dispatch","DispatchContext","useState","url","setUrl","useEffect","getComponentUrl","then","href","key","text","onClick"],"mappings":"iIAAA,uFASMA,EAAyB,CAC7B,CAAC,KAAK,EAAM,SAAU,IAAK,gEAC3B,CAAC,KAAK,EAAM,SAAU,IAAK,+DAC3B,CAAC,QAAQ,EAAM,UAAW,QAAS,iDAG/BC,EAAW,CACfC,OAAQ,4BACRC,KAAM,gCAGFC,EAAiB,WAAO,IAAD,EACJC,qBAAWC,KAA1BC,EADmB,EACnBA,EAAGC,EADgB,EAChBA,EAAGC,EADa,EACbA,KAEd,OACE,kBAAC,IAAD,CACEC,QAAS,OACTH,EAAGE,EAAOF,EAAI,EACdC,EAAGC,EAAOD,EAAI,EACdG,OAAQF,OAAOG,EAAY,GAC3BC,OAAQJ,OAAOG,EAAY,GAC3BE,QAAS,GACTC,QAAS,MAKTC,EAAkC,WACtC,OACE,kBAAC,IAAD,CAAYf,SAAUA,GACpB,kBAAC,IAAD,CAAkBS,QAAS,WAC3B,kBAACN,EAAD,QA4BSa,UAvBqB,WAClC,OACE,oCACE,kBAAC,IAAD,uBACA,kBAAC,IAAD,+CACyC,kBAAC,IAAD,UADzC,QACwE,kBAAC,IAAD,UADxE,+CAES,kBAAC,IAAD,CAAeC,KAAMC,IAAMC,aAFpC,SAEwD,kBAAC,IAAD,aAFxD,0GAIE,6BAJF,kEAOA,kBAAC,IAAD,CAAOC,MAAO,CAAEC,OAAQ,MACtB,kBAACN,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYO,IAAK,gDAEnB,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAYvB,MAAOA,O,6EChDVwB,IAXsD,SAAC,GAAyB,IAAvBN,EAAsB,EAAtBA,KAAMO,EAAgB,EAAhBA,UACpEC,EAAarB,qBAAWsB,KAAxBD,SADoF,EAEtEE,qBAFsE,mBAErFC,EAFqF,KAEhFC,EAFgF,KAQ5F,OAJAC,qBAAU,WACRC,YAAgBd,GAAMe,MAAK,SAAAJ,GAAG,OAAIC,EAAO,IAAD,OAAKD,SAC5C,CAACX,IAEG,kBAAC,IAAD,CAAqBO,UAAWA,EAAWS,KAAML,EAAKM,IAAKjB,EAAMkB,KAAMlB,EAAMmB,QAAS,kBAAMX,EAASR","file":"static/js/40.7199c3e5.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiSprite, PixiTilingSprite, PointerContext } from 'pixi-reactive';\nimport React, { useContext } from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst props: PropsDefinition = [\n  ['x', true, 'number', '0', 'Relative pointer position from the left border of the canvas'],\n  ['y', true, 'number', '0', 'Relative pointer position from the top border of the canvas'],\n  ['over', true, 'boolean', 'false', 'Whether the pointer/touch is over the canvas']\n];\n\nconst textures = {\n  galaxy: '/static/assets/galaxy.png',\n  ship: '/static/assets/spaceship.png'\n};\n\nconst Ship: React.FC = () => {\n  const { x, y, over } = useContext(PointerContext);\n\n  return (\n    <PixiSprite\n      texture={'ship'}\n      x={over ? x : 0}\n      y={over ? y : 0}\n      alignX={over ? undefined : 0.5}\n      alignY={over ? undefined : 0.5}\n      anchorX={0.5}\n      anchorY={0.5}\n    />\n  );\n};\n\nconst PointerContextExample: React.FC = () => {\n  return (\n    <PixiCanvas textures={textures}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <Ship />\n    </PixiCanvas>\n  );\n};\n\nconst PointerContextDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>PointerContext</StyledTitle>\n      <StyledIntroduction>\n        This context will provide you with the <StyledCode>x</StyledCode> and <StyledCode>y</StyledCode> coordinates of the pointer relative\n        to the <ComponentLink page={Pages.PixiCanvas} />. The <StyledCode>over</StyledCode> flag will tell you if the pointer is over the\n        canvas or if a touch action has started over the canvas.\n        <br />\n        Try to move the mouse or touch and drag over the canvas below:\n      </StyledIntroduction>\n      <Block style={{ height: 300 }}>\n        <PointerContextExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'/static/examples/PointerContextExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n    </>\n  );\n};\n\nexport default PointerContextDoc;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { DispatchContext, getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const { dispatch } = useContext(DispatchContext);\n  const [url, setUrl] = useState<string|undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then(url => setUrl(`#${url}`))\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} onClick={() => dispatch(page)} />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}