{"version":3,"sources":["views/pages/Path.tsx","views/PropsTable.tsx","views/ComponentLink.tsx","views/pages/Polygon.tsx"],"names":["DrawingActionType","PathExample","color","width","x","y","reducer","state","action","type","Update","context","over","selected","drawing","newPath","paths","length","currentPath","Clear","DrawPathExample","useReducer","update","clear","useCallback","draw","onInteractionUpdate","background","map","path","pathId","key","point","pointId","iconOnly","iconF7","onClick","PathDoc","page","Pages","Point","style","height","src","props","shapeProps","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Types","pages","Map","i","getComponentUrl","set","PropsTable","useState","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","ComponentLink","className","url","setUrl","PolygonExample","PolygonDoc"],"mappings":"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","file":"static/js/19.450e7b8e.chunk.js","sourcesContent":["import { Block, Link } from 'framework7-react';\nimport { LineStyle, PixiCanvas, PixiGraphics, Path, Point, PointerContextType, Coords } from 'pixi-reactive';\nimport React, { useCallback, useReducer } from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\nimport { shapeProps } from './Polygon';\n\nexport const PathExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiGraphics>\n        <Path>\n          <LineStyle color={0xff0000} width={10} />\n          <Point x={20} y={80} />\n          <Point x={70} y={170} />\n          <Point x={120} y={20} />\n          <Point x={320} y={60} />\n        </Path>\n      </PixiGraphics>\n    </PixiCanvas>\n  );\n};\n\ntype DrawingState = {\n  drawing: boolean;\n  paths: Coords[][];\n};\nenum DrawingActionType {\n  Update,\n  Clear\n}\ntype DrawingAction = {\n  type: DrawingActionType;\n  context?: PointerContextType;\n};\n\nconst reducer = (state: DrawingState, action: DrawingAction): DrawingState => {\n  if (action.type === DrawingActionType.Update && action.context) {\n    const { x, y, over, selected } = action.context;\n\n    if (state.drawing && (!over || !selected)) { // Pointer has been released\n      state.drawing = false;\n    } else if (!state.drawing && over && selected) { // Pointer has started drawing, new path created\n      const newPath = [{ x, y }];\n      state.paths = [...state.paths, newPath];\n      state.drawing = true;\n    } else if (state.drawing && state.paths.length > 0 && over && selected) { // Pointer is drawing\n      const currentPath = [...state.paths[state.paths.length - 1], { x, y }];\n      state.paths.length = state.paths.length - 1;\n      state.paths = [...state.paths, currentPath];\n    } else { // State is unchanged\n      return state;\n    }\n    return {\n      ...state\n    };\n  } else if (action.type === DrawingActionType.Clear) {\n    return {\n      paths: [],\n      drawing: false\n    };\n  }\n  return state;\n};\n\nexport const DrawPathExample: React.FC = () => {\n  const [{ paths }, update] = useReducer(reducer, { drawing: false, paths: [] });\n\n  const clear = useCallback(() => update({ type: DrawingActionType.Clear }), []);\n  const draw = useCallback((context: PointerContextType) => update({ type: DrawingActionType.Update, context }), []);\n\n  return (\n    <PixiCanvas onInteractionUpdate={draw} background={0xffffff}>\n      {paths.map((path, pathId) => {\n        return (\n          <PixiGraphics key={`path-${pathId}`}>\n            <Path>\n              <LineStyle color={0xff0000} width={3} />\n              {path.map((point, pointId) => {\n                return <Point key={`point-${pointId}`} {...point} />;\n              })}\n            </Path>\n          </PixiGraphics>\n        );\n      })}\n      <Link iconOnly iconF7={'clear'} color={'black'} onClick={clear} />\n    </PixiCanvas>\n  );\n};\n\nconst PathDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>Path</StyledTitle>\n      <StyledIntroduction>\n        It draws a Path on the canvas. The shape is defined by a list of <ComponentLink page={Pages.Point} /> component that identify the{' '}\n        <StyledCode>x</StyledCode> and <StyledCode>y</StyledCode> coordinates of the points along the path.\n      </StyledIntroduction>\n      <Block style={{ height: 200 }}>\n        <PathExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PathExample.tsx'} />\n      </Block>\n      <Block style={{ height: 400 }}>\n        Try to draw on the canvas below ;-)\n        <DrawPathExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/DrawPathExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={shapeProps} />\n    </>\n  );\n};\n\nexport default PathDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n","import { Block } from 'framework7-react';\nimport { LineStyle, PixiCanvas, PixiGraphics, Polygon, Point } from 'pixi-reactive';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nexport const shapeProps: PropsDefinition = [['name', false, 'string', 'null', 'Name or ID of the shape']];\n\nexport const PolygonExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiGraphics>\n        <Polygon>\n          <LineStyle color={0x00ff00} width={2} />\n          <Point x={20} y={20} />\n          <Point x={120} y={20} />\n          <Point x={70} y={170} />\n        </Polygon>\n      </PixiGraphics>\n    </PixiCanvas>\n  );\n};\n\nconst PolygonDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>Polygon</StyledTitle>\n      <StyledIntroduction>\n        It draws a polygon on the canvas. The shape is defined by a list of <ComponentLink page={Pages.Point} /> component that identify the{' '}\n        <StyledCode>x</StyledCode> and <StyledCode>y</StyledCode> coordinates of the polygon vertices.\n      </StyledIntroduction>\n      <Block style={{ height: 200 }}>\n        <PolygonExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PolygonExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={shapeProps} />\n    </>\n  );\n};\n\nexport default PolygonDoc;\n"],"sourceRoot":""}