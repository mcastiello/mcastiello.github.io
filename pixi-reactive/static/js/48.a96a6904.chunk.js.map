{"version":3,"sources":["views/pages/LineStyle.tsx","views/PropsTable.tsx","views/CodeViewer.tsx","views/ComponentLink.tsx"],"names":["props","LineStyleExample","x","y","radius","color","alpha","width","alignment","cap","LineCap","Round","LineStyleDoc","page","Pages","ShapeTexture","style","height","src","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","useState","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","setCode","fetch","response","darcula","language","showLineNumbers","ComponentLink","className","url","setUrl"],"mappings":"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","file":"static/js/48.a96a6904.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { LineStyle, PixiCanvas, PixiGraphics, Star, LineCap } from 'pixi-reactive';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst props: PropsDefinition = [\n  ['color', false, 'number', '0xffffff', 'Color used to fill the outline'],\n  ['alpha', false, 'number', '1', 'Opacity of the outline'],\n  ['width', false, 'number', '1', 'Width of the line'],\n  [\n    'alignment',\n    false,\n    'number',\n    '0',\n    'Alignment of the line around the border of the shape (0 means external to the shape while 1 is internal)'\n  ],\n  ['cap', false, 'LineCap', 'LineCap.Butt', 'Line cap style'],\n  ['join', false, 'LineJoin', 'LineJoin.Miter', 'Shape to be used at the corners of the line path'],\n  ['miterLimit', false, 'number', '10', 'Limit of the miter shape'],\n  ['native', false, 'boolean', 'false', 'If true the lines will be draw using LINES instead of TRIANGLE_STRIP']\n];\n\nconst LineStyleExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiGraphics>\n        <Star x={100} y={95} radius={80}>\n          <LineStyle color={0xffff00} alpha={0.75} width={10} alignment={0.5} cap={LineCap.Round} />\n        </Star>\n      </PixiGraphics>\n    </PixiCanvas>\n  );\n};\n\nconst LineStyleDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>LineStyle</StyledTitle>\n      <StyledIntroduction>\n        The style used to define the outline of the shape. It accepts a <ComponentLink page={Pages.ShapeTexture} /> to use it as line\n        filler.\n      </StyledIntroduction>\n      <Block style={{ height: 200 }}>\n        <LineStyleExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/LineStyleExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n    </>\n  );\n};\n\nexport default LineStyleDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}