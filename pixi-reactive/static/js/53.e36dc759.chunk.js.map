{"version":3,"sources":["views/pages/PixiMask.tsx","views/PropsTable.tsx","views/ComponentLink.tsx"],"names":["maskProps","PixiMaskExample","enabled","useReducer","x","position","update","onUpdate","tileY","width","height","alignY","alignX","src","PixiMaskDoc","useState","setEnabled","toggle","useCallback","page","Pages","PixiTexture","style","textAlign","marginRight","defaultChecked","onChange","props","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","types","setTypes","useEffect","then","prop","index","key","f7","size","has","text","href","get","external","split","content","ComponentLink","className","url","setUrl"],"mappings":"gOASMA,EAA6B,CACjC,CAAC,WAAW,EAAO,UAAW,OAAQ,qDACtC,CAAC,WAAW,EAAO,SAAU,OAAQ,mCAGjCC,EAAkD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAC5CC,sBAAW,SAACC,GAAD,OAAOA,EAAI,IAAG,GADmB,mBAChEC,EADgE,KACtDC,EADsD,KAGvE,OACE,kBAAC,IAAD,CAAYC,SAAUD,GACpB,kBAAC,IAAD,CAAkBE,MAAOH,EAAUI,MAAO,IAAKC,OAAQ,IAAKC,OAAQ,GAAKC,OAAQ,IAC/E,kBAAC,IAAD,CAAaC,IAAK,+BAClB,kBAAC,IAAD,CAAUX,QAASA,GACjB,kBAAC,IAAD,CAAaW,IAAK,0CAmCbC,UA5Be,WAAO,IAAD,EACJC,oBAAS,GADL,mBAC3Bb,EAD2B,KAClBc,EADkB,KAE5BC,EAASC,uBAAY,kBAAMF,GAAYd,KAAU,CAACA,IAExD,OACE,oCACE,kBAAC,IAAD,iBACA,kBAAC,IAAD,2GACsG,IACpG,kBAAC,IAAD,CAAeiB,KAAMC,IAAMC,cAF7B,sHAKA,kBAAC,IAAD,CAAOC,MAAO,CAAEC,UAAW,UACzB,0BAAMD,MAAO,CAAEE,YAAa,KAAO,eACnC,kBAAC,IAAD,CAAQC,gBAAc,EAACC,SAAUT,KAEnC,kBAAC,IAAD,CAAOK,MAAO,CAAEZ,OAAQ,MACtB,kBAACT,EAAD,CAAiBC,QAASA,KAE5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYW,IAAK,2CAEnB,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAYc,MAAO3B,O,0TC3ClB,IAkBH4B,EAlBSC,EAAaC,IAAOC,KAAV,KAoBjBC,EAAY,uCAAG,kCAAAC,EAAA,yDACdL,EADc,iCAEGM,YAAgBd,IAAMe,OAFzB,OAEXC,EAFW,OAGXC,EAAM,IAAIC,IAEPC,EAAI,EALI,YAKDA,EAAIH,EAAMI,QALT,iCAMIC,YAAgBL,EAAMG,IAN1B,OAMTG,EANS,OAQfL,EAAIM,IAAIP,EAAMG,GAAd,WAAsBG,IARP,QAKiBH,IALjB,uBAWjBX,EAAaS,EAXI,iCAcZT,GAdY,4CAAH,qDAkEHgB,IAjD0C,SAAC,GAAoB,IAAD,IAAjBjB,aAAiB,MAAT,GAAS,IACjDZ,qBADiD,mBACpE8B,EADoE,KAC7DC,EAD6D,KAO3E,OAJAC,qBAAU,WACRf,IAAegB,KAAKF,KACnB,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,+BACE,4BACE,oCACA,wCACA,oCACA,uCACA,6CAGJ,+BACGnB,EAAMU,KAAI,SAACY,EAAMC,GAChB,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAK,IACV,4BAAKA,EAAK,GAAK,kBAAC,IAAD,CAAMG,GAAI,gBAAiBC,KAAM,KAAS,MACzD,4BACE,8BACGR,GAASA,EAAMS,IAAIL,EAAK,IACvB,kBAAC,IAAD,CAAYM,KAAMN,EAAK,GAAIO,KAAMX,EAAMY,IAAIR,EAAK,IAAcS,UAAQ,IAEtET,EAAK,KAIX,4BACE,8BAAOA,EAAK,KAEd,4BAAeA,EAAK,GApEjBU,MAAM,KAEZtB,KAAI,SAACuB,EAASV,GACzB,OAAIA,EAAQ,IAAM,EACT,0BAAMC,IAAKD,GAAQU,GAEnB,kBAAC/B,EAAD,CAAYsB,IAAKD,GAAQU,iB,6ECRvBC,IAVsD,SAAC,GAAyB,IAAvB1C,EAAsB,EAAtBA,KAAM2C,EAAgB,EAAhBA,UAAgB,EACtE/C,qBADsE,mBACrFgD,EADqF,KAChFC,EADgF,KAO5F,OAJAjB,qBAAU,WACRN,YAAgBtB,GAAM6B,MAAK,SAACe,GAAD,OAASC,EAAO,IAAD,OAAKD,SAC9C,CAAC5C,IAEG,kBAAC,IAAD,CAAqB2C,UAAWA,EAAWN,KAAMO,EAAKZ,IAAKhC,EAAMoC,KAAMpC,EAAMuC,UAAQ","file":"static/js/53.e36dc759.chunk.js","sourcesContent":["import { Block, Toggle } from 'framework7-react';\nimport { PixiCanvas, PixiMask, PixiTexture, PixiTilingSprite } from 'pixi-reactive';\nimport React, { useCallback, useReducer, useState } from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst maskProps: PropsDefinition = [\n  ['enabled', false, 'boolean', 'true', 'Whether the mask is applied to the element or not'],\n  ['texture', false, 'string', 'null', 'Name of the texture to be used']\n];\n\nconst PixiMaskExample: React.FC<{ enabled: boolean }> = ({ enabled }) => {\n  const [position, update] = useReducer((x) => x - 1, 0);\n\n  return (\n    <PixiCanvas onUpdate={update}>\n      <PixiTilingSprite tileY={position} width={216} height={150} alignY={0.5} alignX={0.5}>\n        <PixiTexture src={'./static/assets/galaxy.png'} />\n        <PixiMask enabled={enabled}>\n          <PixiTexture src={'./static/assets/pixi-reactive.png'} />\n        </PixiMask>\n      </PixiTilingSprite>\n    </PixiCanvas>\n  );\n};\n\nconst PixiMaskDoc: React.FC = () => {\n  const [enabled, setEnabled] = useState(true);\n  const toggle = useCallback(() => setEnabled(!enabled), [enabled]);\n\n  return (\n    <>\n      <StyledTitle>PixiMask</StyledTitle>\n      <StyledIntroduction>\n        Apply a texture mask to the parent container, you can pass the texture id as a props or add a child{' '}\n        <ComponentLink page={Pages.PixiTexture} />. The mask has a flag that allow you to disable or enable it without the need of removing\n        it from the virtual dom.\n      </StyledIntroduction>\n      <Block style={{ textAlign: 'right' }}>\n        <span style={{ marginRight: 10 }}>{'Toggle Mask'}</span>\n        <Toggle defaultChecked onChange={toggle} />\n      </Block>\n      <Block style={{ height: 150 }}>\n        <PixiMaskExample enabled={enabled} />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PixiMaskExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={maskProps} />\n    </>\n  );\n};\n\nexport default PixiMaskDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}