{"version":3,"sources":["views/CodeViewer.tsx","views/ComponentLink.tsx","views/pages/LoadResourceType.tsx"],"names":["SyntaxHighlighter","registerLanguage","tsx","CodeViewer","src","children","useState","code","setCode","useEffect","fetch","then","response","text","style","darcula","language","showLineNumbers","ComponentLink","page","className","url","setUrl","getComponentUrl","href","key","external","TextureContextDoc","Pages","TextureContext"],"mappings":"wLAKAA,IAAkBC,iBAAiB,MAAOC,KAyB3BC,IAvBoD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,IAAyB,IAApBC,gBAAoB,MAAT,GAAS,IACrEC,mBAASD,GAD4D,mBACtFE,EADsF,KAChFC,EADgF,KAe7F,OAZAC,qBAAU,WACJL,GACFM,MAAMN,GAAKO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAE,GAAI,OAAIL,EAAQK,QAEnE,CAACT,IAEJK,qBAAU,WACJJ,GACFG,EAAQH,KAET,CAACA,IAIF,kBAAC,IAAD,CAAmBS,MAAOC,IAASC,SAAU,MAAOC,iBAAe,GAChEV,K,6ECXQW,IAVsD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAAgB,EACtEd,qBADsE,mBACrFe,EADqF,KAChFC,EADgF,KAO5F,OAJAb,qBAAU,WACRc,YAAgBJ,GAAMR,MAAK,SAACU,GAAD,OAASC,EAAO,IAAD,OAAKD,SAC9C,CAACF,IAEG,kBAAC,IAAD,CAAqBC,UAAWA,EAAWI,KAAMH,EAAKI,IAAKN,EAAMN,KAAMM,EAAMO,UAAQ,M,gCCX9F,qEAyBeC,UAlBqB,WAClC,OACE,oCACE,kBAAC,IAAD,uBACA,kBAAC,IAAD,yPAEgH,IAC9G,kBAAC,IAAD,CAAeR,KAAMS,IAAMC,iBAH7B,SAIE,6BAJF,qFAOA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYzB,IAAK","file":"static/js/10.e14b0d2b.chunk.js","sourcesContent":["import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    // @ts-ignore\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n","import { Block } from 'framework7-react';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport { StyledIntroduction, StyledTitle } from '../StyledComponents';\n\nconst TextureContextDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>TextureContext</StyledTitle>\n      <StyledIntroduction>\n        This type define the format accepted by the texture loader. It is basically an object where the keys are the names you want to give\n        to the textures and the values are the path to the actual resource. For more information, please refer to the{' '}\n        <ComponentLink page={Pages.TextureContext} /> page.\n        <br />\n        The following is a valid example of an object that can be used to load resources:\n      </StyledIntroduction>\n      <Block>\n        <CodeViewer src={'./static/assets/imports.json'} />\n      </Block>\n    </>\n  );\n};\n\nexport default TextureContextDoc;\n"],"sourceRoot":""}