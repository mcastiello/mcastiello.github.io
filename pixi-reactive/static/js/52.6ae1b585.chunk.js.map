{"version":3,"sources":["views/pages/PixiRenderTexture.tsx","views/PropsTable.tsx","views/CodeViewer.tsx","views/ComponentLink.tsx"],"names":["textureProps","textures","galaxy","ship","PixiRenderTextureExample","useReducer","previousPosition","position","update","onUpdate","texture","alignY","alignX","width","height","x","PixiRenderTextureDoc","page","Pages","PixiSprite","PixiAnimatedSprite","PixiTilingSprite","PixiCanvas","style","src","props","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","useState","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","setCode","fetch","response","darcula","language","showLineNumbers","ComponentLink","className","url","setUrl"],"mappings":"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","file":"static/js/52.6ae1b585.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiTilingSprite, PixiRenderTexture, PixiSprite } from 'pixi-reactive';\nimport React, { useReducer } from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst textureProps: PropsDefinition = [\n  ['name', false, 'string', 'null', 'Name or ID of the texture'],\n  ['width', true, 'number', 'null', 'Width of the rendering context'],\n  ['height', true, 'number', 'null', 'Height of the rendering context']\n];\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nconst PixiRenderTextureExample: React.FC = () => {\n  const [position, update] = useReducer((previousPosition) => (previousPosition + 1) % 600, 0);\n  return (\n    <PixiCanvas textures={textures} onUpdate={update}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite alignY={0.5} alignX={0.5}>\n        <PixiRenderTexture width={300} height={120}>\n          <PixiSprite texture={'ship'} x={position - 150} alignY={0.5} />\n        </PixiRenderTexture>\n      </PixiSprite>\n    </PixiCanvas>\n  );\n};\n\nconst PixiRenderTextureDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>PixiRenderTexture</StyledTitle>\n      <StyledIntroduction>\n        The render texture creates a new scene/context that will be rendered into a texture and, as such, can be used as a source for all\n        those components that can accept a texture as a child, like a <ComponentLink page={Pages.PixiSprite} />, a{' '}\n        <ComponentLink page={Pages.PixiAnimatedSprite} /> or a <ComponentLink page={Pages.PixiTilingSprite} />. The use of this particular\n        texture is recommended when you need to create dynamically a complex scene that will stay mostly static for the rest of the game.\n        Rendering inside a texture is expensive, but if it is used to collapse together different objects into a single sprite, it can be a\n        good way to optimise performances.\n        <br />\n        Once you added the texture to its container, you can than use it as the main <ComponentLink page={Pages.PixiCanvas} />.\n      </StyledIntroduction>\n      <Block style={{ height: 300 }}>\n        <PixiRenderTextureExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PixiRenderTextureExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={textureProps} />\n    </>\n  );\n};\n\nexport default PixiRenderTextureDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}