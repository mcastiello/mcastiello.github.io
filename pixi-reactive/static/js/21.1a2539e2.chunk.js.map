{"version":3,"sources":["views/pages/Rectangle.tsx","views/PropsTable.tsx","views/ComponentLink.tsx","views/pages/Polygon.tsx"],"names":["props","shapeProps","RectangleExample","x","y","width","height","color","borderRadius","RectangleDoc","style","src","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","useState","types","setTypes","useEffect","then","prop","index","key","f7","size","has","text","href","get","external","split","content","ComponentLink","page","className","url","setUrl","PolygonExample","PolygonDoc","Point"],"mappings":"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","file":"static/js/21.1a2539e2.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { LineStyle, PixiCanvas, PixiGraphics, Rectangle } from 'pixi-reactive';\nimport React from 'react';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\nimport { shapeProps } from './Polygon';\n\nconst props: PropsDefinition = [\n  ...shapeProps,\n  ['x', true, 'number', 'null', 'Position on the X axis of the shape'],\n  ['y', true, 'number', 'null', 'Position on the Y axis of the shape'],\n  ['width', true, 'number', 'null', 'Width of the shape'],\n  ['height', true, 'number', 'null', 'Height of the shape'],\n  ['borderRadius', false, 'number', '0', 'Radius applied to each corner']\n];\n\nconst RectangleExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiGraphics>\n        <Rectangle x={10} y={10} width={200} height={200}>\n          <LineStyle color={0xff0000} width={10} />\n        </Rectangle>\n        <Rectangle x={250} y={10} width={200} height={200} borderRadius={10}>\n          <LineStyle color={0x00ff00} width={10} />\n        </Rectangle>\n      </PixiGraphics>\n    </PixiCanvas>\n  );\n};\n\nconst RectangleDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>Rectangle</StyledTitle>\n      <StyledIntroduction>It draws a rectangle on the canvas.</StyledIntroduction>\n      <Block style={{ height: 250 }}>\n        <RectangleExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/RectangleExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n    </>\n  );\n};\n\nexport default RectangleDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n","import { Block } from 'framework7-react';\nimport { LineStyle, PixiCanvas, PixiGraphics, Polygon, Point } from 'pixi-reactive';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nexport const shapeProps: PropsDefinition = [['name', false, 'string', 'null', 'Name or ID of the shape']];\n\nexport const PolygonExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiGraphics>\n        <Polygon>\n          <LineStyle color={0x00ff00} width={2} />\n          <Point x={20} y={20} />\n          <Point x={120} y={20} />\n          <Point x={70} y={170} />\n        </Polygon>\n      </PixiGraphics>\n    </PixiCanvas>\n  );\n};\n\nconst PolygonDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>Polygon</StyledTitle>\n      <StyledIntroduction>\n        It draws a polygon on the canvas. The shape is defined by a list of <ComponentLink page={Pages.Point} /> component that identify the{' '}\n        <StyledCode>x</StyledCode> and <StyledCode>y</StyledCode> coordinates of the polygon vertices.\n      </StyledIntroduction>\n      <Block style={{ height: 200 }}>\n        <PolygonExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PolygonExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={shapeProps} />\n    </>\n  );\n};\n\nexport default PolygonDoc;\n"],"sourceRoot":""}