{"version":3,"sources":["views/pages/Star.tsx","views/PropsTable.tsx","views/CodeViewer.tsx","views/ComponentLink.tsx","views/pages/Polygon.tsx"],"names":["props","shapeProps","StarExample","x","y","radius","color","width","StarDoc","style","height","src","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","useState","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","setCode","fetch","response","darcula","language","showLineNumbers","ComponentLink","page","className","url","setUrl","PolygonExample","PolygonDoc","Point"],"mappings":"yNAQMA,EAAsB,sBACvBC,cADuB,CAE1B,CAAC,KAAK,EAAM,SAAU,OAAQ,oDAC9B,CAAC,KAAK,EAAM,SAAU,OAAQ,oDAC9B,CAAC,UAAU,EAAM,SAAU,OAAQ,sBACnC,CAAC,eAAe,EAAO,SAAU,aAAc,4BAC/C,CAAC,UAAU,EAAO,SAAU,IAAK,2CACjC,CAAC,YAAY,EAAO,SAAU,IAAK,qCAG/BC,EAAwB,WAC5B,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,KAAD,CAAMC,EAAG,IAAKC,EAAG,IAAKC,OAAQ,IAA9B,SACE,cAAC,IAAD,CAAWC,MAAO,SAAUC,MAAO,YAwB9BC,UAjBW,WACxB,OACE,qCACE,cAAC,IAAD,mBACA,cAAC,IAAD,6CACA,cAAC,IAAD,CAAOC,MAAO,CAAEC,OAAQ,KAAxB,SACE,cAACR,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAYS,IAAK,wCAEnB,cAAC,IAAD,yBACA,cAAC,IAAD,CAAYX,MAAOA,S,yTCjClB,IAkBHY,EAlBSC,EAAaC,IAAOC,KAAV,KAoBjBC,EAAY,uCAAG,kCAAAC,EAAA,yDACdL,EADc,iCAEGM,YAAgBC,IAAMC,OAFzB,OAEXC,EAFW,OAGXC,EAAM,IAAIC,IAEPC,EAAI,EALI,YAKDA,EAAIH,EAAMI,QALT,iCAMIC,YAAgBL,EAAMG,IAN1B,OAMTG,EANS,OAQfL,EAAIM,IAAIP,EAAMG,GAAd,WAAsBG,IARP,QAKiBH,IALjB,uBAWjBZ,EAAaU,EAXI,iCAcZV,GAdY,4CAAH,qDAkEHiB,IAjD0C,SAAC,GAAoB,IAAD,IAAjB7B,aAAiB,MAAT,GAAS,IACjD8B,qBADiD,mBACpEC,EADoE,KAC7DC,EAD6D,KAO3E,OAJAC,qBAAU,WACRjB,IAAekB,KAAKF,KACnB,IAGD,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,gCACE,+BACE,sCACA,0CACA,sCACA,yCACA,kDAGJ,gCACGhC,EAAMsB,KAAI,SAACa,EAAMC,GAChB,OACE,+BACE,6BAAKD,EAAK,KACV,6BAAKA,EAAK,GAAK,cAAC,IAAD,CAAME,GAAI,gBAAiBC,KAAM,KAAS,OACzD,6BACE,+BACGP,GAASA,EAAMQ,IAAIJ,EAAK,IACvB,cAAC,IAAD,CAAYK,KAAML,EAAK,GAAIM,KAAMV,EAAMW,IAAIP,EAAK,IAAcQ,UAAQ,IAEtER,EAAK,OAIX,6BACE,+BAAOA,EAAK,OAEd,8BArEQK,EAqEOL,EAAK,GApEtBK,EAAKI,MAAM,KAEZtB,KAAI,SAACuB,EAAST,GACzB,OAAIA,EAAQ,IAAM,EACT,+BAAmBS,GAART,GAEX,cAACvB,EAAD,UAAyBgC,GAART,WA+CLA,GAtDA,IAACI,gB,uFCV1BM,IAAkBC,iBAAiB,MAAOC,KAwB3BC,IAtBoD,SAAC,GAA4B,IAA1BtC,EAAyB,EAAzBA,IAAyB,IAApBuC,gBAAoB,MAAT,GAAS,IACrEpB,mBAASoB,GAD4D,mBACtFnC,EADsF,KAChFoC,EADgF,KAe7F,OAZAlB,qBAAU,WACJtB,GACFyC,MAAMzC,GAAKuB,MAAK,SAAAmB,GAAQ,OAAIA,EAASb,UAAQN,MAAK,SAAAM,GAAI,OAAIW,EAAQX,QAEnE,CAAC7B,IAEJsB,qBAAU,WACJiB,GACFC,EAAQD,KAET,CAACA,IAGF,cAAC,IAAD,CAAmBzC,MAAO6C,IAASC,SAAU,MAAOC,iBAAe,EAAnE,SACGzC,M,4ECVQ0C,IAVsD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAAgB,EACtE7B,qBADsE,mBACrF8B,EADqF,KAChFC,EADgF,KAO5F,OAJA5B,qBAAU,WACRP,YAAgBgC,GAAMxB,MAAK,SAAC0B,GAAD,OAASC,EAAO,IAAD,OAAKD,SAC9C,CAACF,IAEG,cAAC,IAAD,CAAqBC,UAAWA,EAAWlB,KAAMmB,EAAgBpB,KAAMkB,EAAMf,UAAQ,GAA1Be,K,gNCFvDzD,EAA8B,CAAC,CAAC,QAAQ,EAAO,SAAU,OAAQ,4BAEjE6D,EAA2B,WACtC,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAWxD,MAAO,MAAUC,MAAO,IACnC,cAAC,IAAD,CAAOJ,EAAG,GAAIC,EAAG,KACjB,cAAC,IAAD,CAAOD,EAAG,IAAKC,EAAG,KAClB,cAAC,IAAD,CAAOD,EAAG,GAAIC,EAAG,cA2BZ2D,UApBc,WAC3B,OACE,qCACE,cAAC,IAAD,sBACA,eAAC,IAAD,kFACsE,cAAC,IAAD,CAAeL,KAAMvC,IAAM6C,QADjG,+BACuI,IACrI,cAAC,IAAD,gBAFF,QAEiC,cAAC,IAAD,gBAFjC,2CAIA,cAAC,IAAD,CAAOvD,MAAO,CAAEC,OAAQ,KAAxB,SACE,cAACoD,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAYnD,IAAK,2CAEnB,cAAC,IAAD,yBACA,cAAC,IAAD,CAAYX,MAAOC","file":"static/js/22.3cfce2c2.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { LineStyle, PixiCanvas, PixiGraphics, Star } from 'pixi-reactive';\nimport React from 'react';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\nimport { shapeProps } from './Polygon';\n\nconst props: PropsDefinition = [\n  ...shapeProps,\n  ['x', true, 'number', 'null', 'Position on the X axis of the center of the star'],\n  ['y', true, 'number', 'null', 'Position on the Y axis of the center of the star'],\n  ['radius', true, 'number', 'null', 'Radius of the star'],\n  ['innerRadius', false, 'number', 'radius / 2', 'Inner radius of the star'],\n  ['points', false, 'number', '5', 'Number of points used to shape the star'],\n  ['rotation', false, 'number', '0', 'Rotation on radians of the star']\n];\n\nconst StarExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiGraphics>\n        <Star x={110} y={110} radius={100}>\n          <LineStyle color={0xff0000} width={10} />\n        </Star>\n      </PixiGraphics>\n    </PixiCanvas>\n  );\n};\n\nconst StarDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>Star</StyledTitle>\n      <StyledIntroduction>It draws a star on the canvas.</StyledIntroduction>\n      <Block style={{ height: 250 }}>\n        <StarExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/StarExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n    </>\n  );\n};\n\nexport default StarDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n","import { Block } from 'framework7-react';\nimport { LineStyle, PixiCanvas, PixiGraphics, Polygon, Point } from 'pixi-reactive';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nexport const shapeProps: PropsDefinition = [['name', false, 'string', 'null', 'Name or ID of the shape']];\n\nexport const PolygonExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiGraphics>\n        <Polygon>\n          <LineStyle color={0x00ff00} width={2} />\n          <Point x={20} y={20} />\n          <Point x={120} y={20} />\n          <Point x={70} y={170} />\n        </Polygon>\n      </PixiGraphics>\n    </PixiCanvas>\n  );\n};\n\nconst PolygonDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>Polygon</StyledTitle>\n      <StyledIntroduction>\n        It draws a polygon on the canvas. The shape is defined by a list of <ComponentLink page={Pages.Point} /> component that identify the{' '}\n        <StyledCode>x</StyledCode> and <StyledCode>y</StyledCode> coordinates of the polygon vertices.\n      </StyledIntroduction>\n      <Block style={{ height: 200 }}>\n        <PolygonExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PolygonExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={shapeProps} />\n    </>\n  );\n};\n\nexport default PolygonDoc;\n"],"sourceRoot":""}