{"version":3,"sources":["views/pages/PixiTexture.tsx","views/ComponentLink.tsx"],"names":["textureProps","textureEvents","PixiTextureExample","alignY","alignX","name","src","PixiTextureDoc","page","Pages","PixiSprite","PixiAnimatedSprite","PixiTilingSprite","PixiMask","style","height","props","ComponentLink","className","dispatch","useContext","DispatchContext","useState","url","setUrl","useEffect","getComponentUrl","then","href","key","text","onClick"],"mappings":"iIAAA,uFASMA,EAAgC,CACpC,CAAC,QAAQ,EAAO,SAAU,OAAQ,6BAClC,CAAC,OAAO,EAAM,SAAU,OAAQ,mCAE5BC,EAAiC,CAAC,CAAC,UAAU,EAAO,WAAY,OAAQ,8CAExEC,EAA+B,WACnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYC,OAAQ,GAAKC,OAAQ,IAC/B,kBAAC,IAAD,CAAaC,KAAM,OAAQC,IAAK,oCA8BzBC,UAxBkB,WAC/B,OACE,oCACE,kBAAC,IAAD,oBACA,kBAAC,IAAD,+FACyF,kBAAC,IAAD,CAAeC,KAAMC,IAAMC,aADpH,MACsI,IACpI,kBAAC,IAAD,CAAeF,KAAMC,IAAME,qBAF7B,OAEuD,kBAAC,IAAD,CAAeH,KAAMC,IAAMG,mBAFlF,QAE4G,IAC1G,kBAAC,IAAD,CAAeJ,KAAMC,IAAMI,WAH7B,wKAMA,kBAAC,IAAD,CAAOC,MAAO,CAAEC,OAAQ,MACtB,kBAACb,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYI,IAAK,6CAEnB,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAYU,MAAOhB,IACnB,kBAAC,IAAD,wBACA,kBAAC,IAAD,CAAYgB,MAAOf,O,6EC7BVgB,IAXsD,SAAC,GAAyB,IAAvBT,EAAsB,EAAtBA,KAAMU,EAAgB,EAAhBA,UACpEC,EAAaC,qBAAWC,KAAxBF,SADoF,EAEtEG,qBAFsE,mBAErFC,EAFqF,KAEhFC,EAFgF,KAQ5F,OAJAC,qBAAU,WACRC,YAAgBlB,GAAMmB,MAAK,SAAAJ,GAAG,OAAIC,EAAO,IAAD,OAAKD,SAC5C,CAACf,IAEG,kBAAC,IAAD,CAAqBU,UAAWA,EAAWU,KAAML,EAAKM,IAAKrB,EAAMsB,KAAMtB,EAAMuB,QAAS,kBAAMZ,EAASX","file":"static/js/39.353902de.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiTexture, PixiSprite } from 'pixi-reactive';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst textureProps: PropsDefinition = [\n  ['name', false, 'string', 'null', 'Name or ID of the texture'],\n  ['src', true, 'string', 'null', 'Path to the asset to be loaded']\n];\nconst textureEvents: PropsDefinition = [['onLoad', false, 'function', 'null', 'Triggered when the source image is loaded']];\n\nconst PixiTextureExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiSprite alignY={0.5} alignX={0.5}>\n        <PixiTexture name={'ship'} src={'/static/assets/spaceship.png'} />\n      </PixiSprite>\n    </PixiCanvas>\n  );\n};\n\nconst PixiTextureDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>PixiTexture</StyledTitle>\n      <StyledIntroduction>\n        A texture is a reference to an image or graphic asset that can be used as source for a <ComponentLink page={Pages.PixiSprite} />, a{' '}\n        <ComponentLink page={Pages.PixiAnimatedSprite} />, a <ComponentLink page={Pages.PixiTilingSprite} /> or a{' '}\n        <ComponentLink page={Pages.PixiMask} />. The texture element can be added as a child component to the sprite components and it will\n        trigger an onLoad event when the source image is ready to be displayed.\n      </StyledIntroduction>\n      <Block style={{ height: 150 }}>\n        <PixiTextureExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'/static/examples/PixiTextureExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={textureProps} />\n      <StyledSectionTitle>Event Callbacks</StyledSectionTitle>\n      <PropsTable props={textureEvents} />\n    </>\n  );\n};\n\nexport default PixiTextureDoc;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { DispatchContext, getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const { dispatch } = useContext(DispatchContext);\n  const [url, setUrl] = useState<string|undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then(url => setUrl(`#${url}`))\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} onClick={() => dispatch(page)} />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}