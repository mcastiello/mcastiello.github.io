{"version":3,"sources":["views/pages/Rectangle.tsx"],"names":["props","textures","galaxy","ship","RectangleExample","enabled","useState","trackSize","setTrackSize","x","y","width","height","area","setArea","reducer","useCallback","position","resize","size","Math","round","useReducer","updatePosition","rotation","updateHueRotation","update","onUpdate","onResize","filterArea","texture","alignY","RectangleDoc","setEnabled","toggle","style","textAlign","marginRight","defaultChecked","onChange","src"],"mappings":"+MAOMA,EAAyB,CAC7B,CAAC,KAAK,EAAM,SAAU,IAAK,qDAC3B,CAAC,KAAK,EAAM,SAAU,IAAK,qDAC3B,CAAC,SAAS,EAAM,SAAU,OAAQ,qBAClC,CAAC,UAAU,EAAM,SAAU,OAAQ,uBAG/BC,EAAW,CACfC,OAAQ,6BACRC,KAAM,iCAGFC,EAAmD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACtCC,mBAAS,GAD6B,mBACjEC,EADiE,KACtDC,EADsD,OAEhDF,mBAAoB,CAAEG,EAAG,EAAGC,EAAG,EAAGC,MAAO,EAAGC,OAAQ,IAFJ,mBAEjEC,EAFiE,KAE3DC,EAF2D,KAGlEC,EAAUC,uBAAY,SAACC,GAAD,OAAeA,EAAW,GAAKV,IAAW,CAACA,IACjEW,EAASF,uBAAY,SAACG,GAC1BX,EAAaW,EAAKR,MAAQ,KAC1BG,EAAQ,CACNL,EAAGW,KAAKC,MAAmB,GAAbF,EAAKR,OACnBD,EAAGU,KAAKC,MAAoB,GAAdF,EAAKP,QACnBD,MAAOS,KAAKC,MAAmB,GAAbF,EAAKR,OACvBC,OAAQQ,KAAKC,MAAoB,GAAdF,EAAKP,YAEzB,IAZqE,EAarCU,qBAAWP,EAAS,GAbiB,mBAajEE,EAbiE,KAavDM,EAbuD,OAclCD,sBAAW,SAACE,GAAD,OAAeA,EAAW,IAAO,MAAK,GAdf,mBAcjEA,EAdiE,KAcvDC,EAduD,KAgBlEC,EAASV,uBAAY,WACzBO,IACAE,MACC,IAEH,OACE,kBAAC,IAAD,CAAYxB,SAAUA,EAAU0B,SAAUD,EAAQE,SAAUV,EAAQW,WAAYhB,GAC9E,kBAAC,IAAD,CAAkBiB,QAAS,WAC3B,kBAAC,IAAD,CAAYA,QAAS,OAAQrB,EAAGQ,EAAW,IAAKc,OAAQ,KACxD,kBAAC,IAAD,CAAmB1B,QAASA,GAC1B,kBAAC,IAAD,CAAWmB,SAAUA,OAiCdQ,UA3BgB,WAAO,IAAD,EACL1B,oBAAS,GADJ,mBAC5BD,EAD4B,KACnB4B,EADmB,KAE7BC,EAASlB,uBAAY,kBAAMiB,GAAY5B,KAAU,CAACA,IAExD,OACE,oCACE,kBAAC,IAAD,kBACA,kBAAC,IAAD,6LAEoD,kBAAC,IAAD,gBAFpD,eAIA,kBAAC,IAAD,CAAO8B,MAAO,CAAEC,UAAW,UACzB,0BAAMD,MAAO,CAAEE,YAAa,KAAO,iBACnC,kBAAC,IAAD,CAAQC,gBAAc,EAACC,SAAUL,KAEnC,kBAAC,IAAD,CAAOC,MAAO,CAAEvB,OAAQ,MACtB,kBAACR,EAAD,CAAkBC,QAASA,KAE7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYmC,IAAK,4CAEnB,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAYxC,MAAOA","file":"static/js/62.e9dd3b5f.chunk.js","sourcesContent":["import { Block, Toggle } from 'framework7-react';\nimport React, { useCallback, useReducer, useState } from 'react';\nimport { PixiCanvas, PixiSprite, PixiTilingSprite, ColorMatrixFilter, HueEffect, Rectangle } from 'pixi-reactive';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { StyledCode, PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst props: PropsDefinition = [\n  ['x', true, 'number', '0', 'X coordinate of the object relative to the parent'],\n  ['y', true, 'number', '0', 'X coordinate of the object relative to the parent'],\n  ['width', true, 'number', 'null', 'Width of the area'],\n  ['height', true, 'number', 'null', 'Height of the area']\n];\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nconst RectangleExample: React.FC<{ enabled: boolean }> = ({ enabled }) => {\n  const [trackSize, setTrackSize] = useState(0);\n  const [area, setArea] = useState<Rectangle>({ x: 0, y: 0, width: 0, height: 0 });\n  const reducer = useCallback((position) => (position + 1) % trackSize, [trackSize]);\n  const resize = useCallback((size) => {\n    setTrackSize(size.width + 300);\n    setArea({\n      x: Math.round(size.width * 0.2),\n      y: Math.round(size.height * 0.2),\n      width: Math.round(size.width * 0.6),\n      height: Math.round(size.height * 0.6)\n    });\n  }, []);\n  const [position, updatePosition] = useReducer(reducer, 0);\n  const [rotation, updateHueRotation] = useReducer((rotation) => (rotation + 0.5) % 360, 0);\n\n  const update = useCallback(() => {\n    updatePosition();\n    updateHueRotation();\n  }, []);\n\n  return (\n    <PixiCanvas textures={textures} onUpdate={update} onResize={resize} filterArea={area}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite texture={'ship'} x={position - 150} alignY={0.5} />\n      <ColorMatrixFilter enabled={enabled}>\n        <HueEffect rotation={rotation} />\n      </ColorMatrixFilter>\n    </PixiCanvas>\n  );\n};\n\nconst RectangleDoc: React.FC = () => {\n  const [enabled, setEnabled] = useState(true);\n  const toggle = useCallback(() => setEnabled(!enabled), [enabled]);\n\n  return (\n    <>\n      <StyledTitle>Rectangle</StyledTitle>\n      <StyledIntroduction>\n        The rectangle type identifies an area of space that can be used to create a drawing or to limit some type of functionalities, like\n        the interactivity of some components (through the <StyledCode>hitArea</StyledCode> property).\n      </StyledIntroduction>\n      <Block style={{ textAlign: 'right' }}>\n        <span style={{ marginRight: 10 }}>{'Toggle Filter'}</span>\n        <Toggle defaultChecked onChange={toggle} />\n      </Block>\n      <Block style={{ height: 300 }}>\n        <RectangleExample enabled={enabled} />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/RectangleExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n    </>\n  );\n};\n\nexport default RectangleDoc;\n"],"sourceRoot":""}