{"version":3,"sources":["views/PropsTable.tsx","views/CodeViewer.tsx","views/PageIndex.tsx","views/pages/Filters.tsx","views/pages/BlurFilter.tsx"],"names":["pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","src","children","setCode","fetch","response","style","darcula","language","showLineNumbers","buildIndex","page","items","url","push","PageIndex","showTitle","links","setLinks","filterProps","Filters","blurProps","textures","galaxy","ship","BlurFilterExample","enabled","trackSize","setTrackSize","resize","useCallback","width","reducer","position","useReducer","update","onUpdate","onResize","texture","x","alignY","quality","repeatEdgePixels","blur","BlurFilterDoc","setEnabled","toggle","textAlign","marginRight","defaultChecked","onChange","height"],"mappings":"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","file":"static/js/25.240961ba.chunk.js","sourcesContent":["import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport { getComponentUrl, getPageChildren, PageIndexProps, Pages } from '../pages';\nimport { StyledTitle, IndexComponentLink } from './StyledComponents';\n\nconst buildIndex = async (page: Pages) => {\n  const items: ReactElement[] = [];\n  const pages = await getPageChildren(page);\n\n  for (let i = 0; i < pages.length; i++) {\n    const url = await getComponentUrl(pages[i]);\n\n    items.push(<IndexComponentLink href={`#${url}`} key={pages[i]} text={pages[i]} external />);\n  }\n\n  return items;\n};\n\nconst PageIndex: React.FC<PageIndexProps> = ({ page, showTitle = true }) => {\n  const [links, setLinks] = useState<ReactElement[]>([]);\n\n  useEffect(() => {\n    buildIndex(page).then(setLinks);\n  }, [page]);\n\n  return (\n    <>\n      {showTitle && <StyledTitle>{`All ${page}`}</StyledTitle>}\n      {links}\n    </>\n  );\n};\n\nexport default PageIndex;\n","import React from 'react';\nimport { Pages } from '../../pages';\nimport PageIndex from '../PageIndex';\nimport { PropsDefinition } from '../PropsTable';\n\nexport const filterProps: PropsDefinition = [\n  ['blendMode', false, 'BlendMode', 'BlendModes.Normal', 'Mode used to blend the filter with the element'],\n  ['autoFit', false, 'boolean', 'true', 'If enabled, it will fit the filter area into boundaries for better performance'],\n  ['enabled', false, 'boolean', 'true', 'Whether the filter is applied to the element or not'],\n  [\n    'padding',\n    false,\n    'number',\n    '0',\n    'Some filters require extra space to breath such as a blur. Increasing this will add extra width and height to the ' +\n    'bounds of the object that the filter is applied to'\n  ],\n  ['resolution', false, 'number', '1', 'The resolution of the filter']\n];\n\nconst Filters: React.FC = () => {\n  return <PageIndex page={Pages.Filters} />;\n};\n\nexport default Filters;\n","import { Block, Toggle } from 'framework7-react';\nimport { PixiCanvas, PixiSprite, PixiTilingSprite, BlurFilter } from 'pixi-reactive';\nimport React, { useCallback, useReducer, useState } from 'react';\nimport { filterProps } from './Filters';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst blurProps: PropsDefinition = [\n  ['blur', false, 'number', '2', 'Blur value on both axis'],\n  ['blurX', false, 'number', '2', 'Blur value on the X axis'],\n  ['blurY', false, 'number', '2', 'Blur value on the Y axis'],\n  ['quality', false, 'number', '1', 'Quality of the filter'],\n  ['repeatEdgePixels', false, 'boolean', 'false', 'Whether or not to repeat the pixels at the edge of the element'],\n  ...filterProps\n];\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nconst BlurFilterExample: React.FC<{ enabled: boolean }> = ({ enabled }) => {\n  const [trackSize, setTrackSize] = useState(0);\n  const resize = useCallback((size) => setTrackSize(size.width + 300), []);\n  const reducer = useCallback((position) => (position + 1) % trackSize, [trackSize]);\n  const [position, update] = useReducer(reducer, 0);\n\n  return (\n    <PixiCanvas textures={textures} onUpdate={update} onResize={resize}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite texture={'ship'} x={position - 150} alignY={0.5}>\n        <BlurFilter enabled={enabled} quality={2} repeatEdgePixels={true} blur={0.5} />\n      </PixiSprite>\n    </PixiCanvas>\n  );\n};\n\nconst BlurFilterDoc: React.FC = () => {\n  const [enabled, setEnabled] = useState(true);\n  const toggle = useCallback(() => setEnabled(!enabled), [enabled]);\n\n  return (\n    <>\n      <StyledTitle>BlurFilter</StyledTitle>\n      <StyledIntroduction>\n        Apply a blur filter to the element. Blur can be applied on a single axis (<StyledCode>blurX</StyledCode> or{' '}\n        <StyledCode>blurY</StyledCode>) or on both at the sa time (<StyledCode>blur</StyledCode>)\n      </StyledIntroduction>\n      <Block style={{ textAlign: 'right' }}>\n        <span style={{ marginRight: 10 }}>{'Toggle Filter'}</span>\n        <Toggle defaultChecked onChange={toggle} />\n      </Block>\n      <Block style={{ height: 300 }}>\n        <BlurFilterExample enabled={enabled} />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/BlurFilterExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={blurProps} />\n    </>\n  );\n};\n\nexport default BlurFilterDoc;\n"],"sourceRoot":""}