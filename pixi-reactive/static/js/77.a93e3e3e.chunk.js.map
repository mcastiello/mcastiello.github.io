{"version":3,"sources":["views/PropsTable.tsx","views/CodeViewer.tsx","views/pages/Area.tsx"],"names":["pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","src","children","setCode","fetch","response","style","darcula","language","showLineNumbers","textures","galaxy","ship","AreaExample","enabled","trackSize","setTrackSize","x","y","width","height","area","setArea","reducer","useCallback","position","resize","Math","round","useReducer","updatePosition","rotation","updateHueRotation","update","onUpdate","onResize","filterArea","texture","alignY","AreaDoc","setEnabled","toggle","textAlign","marginRight","defaultChecked","onChange"],"mappings":"yZASO,IAkBHA,EAlBSC,EAAaC,IAAOC,KAAV,KAoBjBC,EAAY,uCAAG,kCAAAC,EAAA,yDACdL,EADc,iCAEGM,YAAgBC,IAAMC,OAFzB,OAEXC,EAFW,OAGXC,EAAM,IAAIC,IAEPC,EAAI,EALI,YAKDA,EAAIH,EAAMI,QALT,iCAMIC,YAAgBL,EAAMG,IAN1B,OAMTG,EANS,OAQfL,EAAIM,IAAIP,EAAMG,GAAd,WAAsBG,IARP,QAKiBH,IALjB,uBAWjBZ,EAAaU,EAXI,iCAcZV,GAdY,4CAAH,qDAkEHiB,IAjD0C,SAAC,GAAoB,IAAD,IAAjBC,aAAiB,MAAT,GAAS,IACjDC,qBADiD,mBACpEC,EADoE,KAC7DC,EAD6D,KAO3E,OAJAC,qBAAU,WACRlB,IAAemB,KAAKF,KACnB,IAGD,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,gCACE,+BACE,sCACA,0CACA,sCACA,yCACA,kDAGJ,gCACGH,EAAMR,KAAI,SAACc,EAAMC,GAChB,OACE,+BACE,6BAAKD,EAAK,KACV,6BAAKA,EAAK,GAAK,cAAC,IAAD,CAAME,GAAI,gBAAiBC,KAAM,KAAS,OACzD,6BACE,+BACGP,GAASA,EAAMQ,IAAIJ,EAAK,IACvB,cAAC,IAAD,CAAYK,KAAML,EAAK,GAAIM,KAAMV,EAAMW,IAAIP,EAAK,IAAcQ,UAAQ,IAEtER,EAAK,OAIX,6BACE,+BAAOA,EAAK,OAEd,8BArEQK,EAqEOL,EAAK,GApEtBK,EAAKI,MAAM,KAEZvB,KAAI,SAACwB,EAAST,GACzB,OAAIA,EAAQ,IAAM,EACT,+BAAmBS,GAART,GAEX,cAACxB,EAAD,UAAyBiC,GAART,WA+CLA,GAtDA,IAACI,gB,uFCV1BM,IAAkBC,iBAAiB,MAAOC,KAwB3BC,IAtBoD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,IAAyB,IAApBC,gBAAoB,MAAT,GAAS,IACrErB,mBAASqB,GAD4D,mBACtFrC,EADsF,KAChFsC,EADgF,KAe7F,OAZAnB,qBAAU,WACJiB,GACFG,MAAMH,GAAKhB,MAAK,SAAAoB,GAAQ,OAAIA,EAASd,UAAQN,MAAK,SAAAM,GAAI,OAAIY,EAAQZ,QAEnE,CAACU,IAEJjB,qBAAU,WACJkB,GACFC,EAAQD,KAET,CAACA,IAGF,cAAC,IAAD,CAAmBI,MAAOC,IAASC,SAAU,MAAOC,iBAAe,EAAnE,SACG5C,M,6GCjBDe,EAAyB,CAC7B,CAAC,KAAK,EAAM,SAAU,IAAK,qDAC3B,CAAC,KAAK,EAAM,SAAU,IAAK,qDAC3B,CAAC,SAAS,EAAM,SAAU,OAAQ,qBAClC,CAAC,UAAU,EAAM,SAAU,OAAQ,uBAG/B8B,EAAW,CACfC,OAAQ,6BACRC,KAAM,iCAGFC,EAA8C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACjCjC,mBAAS,GADwB,mBAC5DkC,EAD4D,KACjDC,EADiD,OAE3CnC,mBAAe,CAAEoC,EAAG,EAAGC,EAAG,EAAGC,MAAO,EAAGC,OAAQ,IAFJ,mBAE5DC,EAF4D,KAEtDC,EAFsD,KAG7DC,EAAUC,uBAAY,SAACC,GAAD,OAAeA,EAAW,GAAKV,IAAW,CAACA,IACjEW,EAASF,uBAAY,SAACnC,GAC1B2B,EAAa3B,EAAK8B,MAAQ,KAC1BG,EAAQ,CACNL,EAAGU,KAAKC,MAAmB,GAAbvC,EAAK8B,OACnBD,EAAGS,KAAKC,MAAoB,GAAdvC,EAAK+B,QACnBD,MAAOQ,KAAKC,MAAmB,GAAbvC,EAAK8B,OACvBC,OAAQO,KAAKC,MAAoB,GAAdvC,EAAK+B,YAEzB,IAZgE,EAahCS,qBAAWN,EAAS,GAbY,mBAa5DE,EAb4D,KAalDK,EAbkD,OAc7BD,sBAAW,SAACE,GAAD,OAAeA,EAAW,IAAO,MAAK,GAdpB,mBAc5DA,EAd4D,KAclDC,EAdkD,KAgB7DC,EAAST,uBAAY,WACzBM,IACAE,MACC,IAEH,OACE,eAAC,IAAD,CAAYtB,SAAUA,EAAUwB,SAAUD,EAAQE,SAAUT,EAAQU,WAAYf,EAAhF,UACE,cAAC,IAAD,CAAkBgB,QAAS,WAC3B,cAAC,IAAD,CAAYA,QAAS,OAAQpB,EAAGQ,EAAW,IAAKa,OAAQ,KACxD,cAAC,IAAD,CAAmBxB,QAASA,EAA5B,SACE,cAAC,IAAD,CAAWiB,SAAUA,UAiCdQ,UA3BW,WAAO,IAAD,EACA1D,oBAAS,GADT,mBACvBiC,EADuB,KACd0B,EADc,KAExBC,EAASjB,uBAAY,kBAAMgB,GAAY1B,KAAU,CAACA,IAExD,OACE,qCACE,cAAC,IAAD,mBACA,eAAC,IAAD,8LAEgD,cAAC,IAAD,sBAFhD,iBAIA,eAAC,IAAD,CAAOR,MAAO,CAAEoC,UAAW,SAA3B,UACE,sBAAMpC,MAAO,CAAEqC,YAAa,IAA5B,SAAmC,kBACnC,cAAC,IAAD,CAAQC,gBAAc,EAACC,SAAUJ,OAEnC,cAAC,IAAD,CAAOnC,MAAO,CAAEc,OAAQ,KAAxB,SACE,cAACP,EAAD,CAAaC,QAASA,MAExB,cAAC,IAAD,UACE,cAAC,IAAD,CAAYb,IAAK,wCAEnB,cAAC,IAAD,yBACA,cAAC,IAAD,CAAYrB,MAAOA","file":"static/js/77.a93e3e3e.chunk.js","sourcesContent":["import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import { Block, Toggle } from 'framework7-react';\nimport React, { useCallback, useReducer, useState } from 'react';\nimport { PixiCanvas, PixiSprite, PixiTilingSprite, ColorMatrixFilter, HueEffect, Area } from 'pixi-reactive';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { StyledCode, PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst props: PropsDefinition = [\n  ['x', true, 'number', '0', 'X coordinate of the object relative to the parent'],\n  ['y', true, 'number', '0', 'X coordinate of the object relative to the parent'],\n  ['width', true, 'number', 'null', 'Width of the area'],\n  ['height', true, 'number', 'null', 'Height of the area']\n];\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nconst AreaExample: React.FC<{ enabled: boolean }> = ({ enabled }) => {\n  const [trackSize, setTrackSize] = useState(0);\n  const [area, setArea] = useState<Area>({ x: 0, y: 0, width: 0, height: 0 });\n  const reducer = useCallback((position) => (position + 1) % trackSize, [trackSize]);\n  const resize = useCallback((size) => {\n    setTrackSize(size.width + 300);\n    setArea({\n      x: Math.round(size.width * 0.2),\n      y: Math.round(size.height * 0.2),\n      width: Math.round(size.width * 0.6),\n      height: Math.round(size.height * 0.6)\n    });\n  }, []);\n  const [position, updatePosition] = useReducer(reducer, 0);\n  const [rotation, updateHueRotation] = useReducer((rotation) => (rotation + 0.5) % 360, 0);\n\n  const update = useCallback(() => {\n    updatePosition();\n    updateHueRotation();\n  }, []);\n\n  return (\n    <PixiCanvas textures={textures} onUpdate={update} onResize={resize} filterArea={area}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite texture={'ship'} x={position - 150} alignY={0.5} />\n      <ColorMatrixFilter enabled={enabled}>\n        <HueEffect rotation={rotation} />\n      </ColorMatrixFilter>\n    </PixiCanvas>\n  );\n};\n\nconst AreaDoc: React.FC = () => {\n  const [enabled, setEnabled] = useState(true);\n  const toggle = useCallback(() => setEnabled(!enabled), [enabled]);\n\n  return (\n    <>\n      <StyledTitle>Area</StyledTitle>\n      <StyledIntroduction>\n        The Area type identifies an area of space that can be used to create a drawing or to limit some type of functionalities, like the\n        interactivity of some components (through the <StyledCode>hitArea</StyledCode> property).\n      </StyledIntroduction>\n      <Block style={{ textAlign: 'right' }}>\n        <span style={{ marginRight: 10 }}>{'Toggle Filter'}</span>\n        <Toggle defaultChecked onChange={toggle} />\n      </Block>\n      <Block style={{ height: 300 }}>\n        <AreaExample enabled={enabled} />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/AreaExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n    </>\n  );\n};\n\nexport default AreaDoc;\n"],"sourceRoot":""}