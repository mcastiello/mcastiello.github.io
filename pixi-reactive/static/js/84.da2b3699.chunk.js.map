{"version":3,"sources":["views/PropsTable.tsx","views/pages/PixiCanvas.tsx"],"names":["pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","useEffect","then","prop","index","key","f7","size","has","text","href","get","external","split","content","renderEvents","events","textures","galaxy","stars","ship","updateScene","state","newDirection","direction","shipY","galaxyTileX","starsTileX","PixiCanvasExample","useReducer","update","height","onUpdate","texture","tileX","x","y","anchorY","PixiCanvasDoc","src"],"mappings":"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","file":"static/js/84.da2b3699.chunk.js","sourcesContent":["import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import { Block } from 'framework7-react';\nimport React, { useReducer } from 'react';\nimport { PixiCanvas, PixiTilingSprite, PixiSprite } from 'pixi-reactive';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledTitle, StyledSectionTitle, StyledIntroduction } from '../StyledComponents';\n\nconst props: PropsDefinition = [\n  ['id', false, 'string', 'null', 'Canvas identifier'],\n  [\n    'overflow',\n    false,\n    'Overflow',\n    'Overflow.All',\n    'Whether HTML elements hovering the canvas should be seen if they overflow their container'\n  ],\n  ['className', false, 'string', 'null', 'CSS class name applied to the canvas element'],\n  ['width', false, 'number', 'null', 'Width of the canvas'],\n  ['height', false, 'number', 'null', 'Height of the canvas'],\n  ['retina', false, 'boolean', 'false', 'Whether to use a @2x canvas'],\n  ['speed', false, 'number', '1', 'Speed at which the rendered animations will run'],\n  ['background', false, 'number', 'null', 'Set the background color of the canvas, if empty the canvas will be transparent'],\n  ['textures', false, 'LoadResourceType', '[]', 'List of textures that will be loaded by the Pixi Loader']\n];\n\nexport const renderEvents: PropsDefinition = [\n  ['onResize', false, 'function', 'null', 'Callback executed when the canvas is resized'],\n  ['onUpdate', false, 'function', 'null', 'Callback executed at every animation frame'],\n  ['onAfterRender', false, 'function', 'null', 'Callback executed after a frame has been rendered on the canvas']\n];\n\nconst events: PropsDefinition = [\n  ...renderEvents,\n  ['onInteractionStart', false, 'function', 'null', 'Callback executed when an interaction is started (touch or mouse)'],\n  ['onInteractionMove', false, 'function', 'null', 'Callback executed when the pointer is moved'],\n  ['onInteractionEnd', false, 'function', 'null', 'Callback executed when the interaction is terminated'],\n]\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  stars: './static/assets/slow-stars.png',\n  ship: './static/assets/spaceship.png'\n};\n\ntype Space = {\n  galaxyTileX: number;\n  starsTileX: number;\n  direction: boolean;\n  shipY: number;\n};\n\nconst updateScene = (state: Space): Space => {\n  let newDirection = state.direction;\n\n  if ((state.direction && state.shipY <= 60) || (!state.direction && state.shipY >= 240)) {\n    newDirection = !state.direction;\n  }\n  return {\n    galaxyTileX: state.galaxyTileX - 0.1,\n    starsTileX: state.starsTileX - 0.5,\n    direction: newDirection,\n    shipY: newDirection ? state.shipY - 0.5 : state.shipY + 0.5\n  };\n};\n\nexport const PixiCanvasExample: React.FC = () => {\n  const [state, update] = useReducer(updateScene, {\n    galaxyTileX: 0,\n    starsTileX: 0,\n    direction: false,\n    shipY: 150\n  });\n\n  return (\n    <PixiCanvas height={300} textures={textures} onUpdate={update}>\n      <PixiTilingSprite texture={'galaxy'} tileX={state.galaxyTileX} />\n      <PixiTilingSprite texture={'stars'} tileX={state.starsTileX} />\n      <PixiSprite texture={'ship'} x={30} y={state.shipY} anchorY={0.5} />\n    </PixiCanvas>\n  );\n};\n\nconst PixiCanvasDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>PixiCanvas</StyledTitle>\n      <StyledIntroduction>\n        The PixiCanvas is the base component that generates the canvas element, initialise the PIXI Renderer, load the textures and creates\n        all the React contexts. It is also responsible of starting the animation loop and render all the elements onto the stage.\n      </StyledIntroduction>\n      <Block>\n        <PixiCanvasExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PixiCanvasExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n      <StyledSectionTitle>Event Callbacks</StyledSectionTitle>\n      <PropsTable props={events} />\n    </>\n  );\n};\n\nexport default PixiCanvasDoc;\n"],"sourceRoot":""}