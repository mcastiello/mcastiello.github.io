{"version":3,"sources":["views/pages/Key.tsx","views/PropsTable.tsx","views/ComponentLink.tsx"],"names":["props","KeyDoc","page","Pages","UseKeyboard","SpecialKeys","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","useState","types","setTypes","useEffect","then","prop","index","key","f7","size","has","text","href","get","external","split","content","ComponentLink","className","url","setUrl"],"mappings":"iIAAA,6DAMMA,EAAyB,CAC7B,CAAC,OAAO,EAAM,SAAU,OAAQ,0BAChC,CAAC,OAAO,EAAO,UAAW,OAAQ,8EAClC,CAAC,WAAW,EAAO,UAAW,OAAQ,kFACtC,CAAC,SAAS,EAAO,UAAW,OAAQ,iFAmBvBC,UAjBU,WACvB,OACE,oCACE,kBAAC,IAAD,YACA,kBAAC,IAAD,0CACoC,kBAAC,IAAD,CAAeC,KAAMC,IAAMC,cAD/D,4BACuG,kBAAC,IAAD,eAAgC,IADvI,+CAIA,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAYJ,MAAOA,IACnB,kBAAC,IAAD,YACM,kBAAC,IAAD,CAAeE,KAAMC,IAAME,cADjC,uF,0TCbC,IAkBHC,EAlBSC,EAAaC,IAAOC,KAAV,KAoBjBC,EAAY,uCAAG,kCAAAC,EAAA,yDACdL,EADc,iCAEGM,YAAgBT,IAAMU,OAFzB,OAEXC,EAFW,OAGXC,EAAM,IAAIC,IAEPC,EAAI,EALI,YAKDA,EAAIH,EAAMI,QALT,iCAMIC,YAAgBL,EAAMG,IAN1B,OAMTG,EANS,OAQfL,EAAIM,IAAIP,EAAMG,GAAd,WAAsBG,IARP,QAKiBH,IALjB,uBAWjBX,EAAaS,EAXI,iCAcZT,GAdY,4CAAH,qDAkEHgB,IAjD0C,SAAC,GAAoB,IAAD,IAAjBtB,aAAiB,MAAT,GAAS,IACjDuB,qBADiD,mBACpEC,EADoE,KAC7DC,EAD6D,KAO3E,OAJAC,qBAAU,WACRhB,IAAeiB,KAAKF,KACnB,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,+BACE,4BACE,oCACA,wCACA,oCACA,uCACA,6CAGJ,+BACGzB,EAAMe,KAAI,SAACa,EAAMC,GAChB,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAK,IACV,4BAAKA,EAAK,GAAK,kBAAC,IAAD,CAAMG,GAAI,gBAAiBC,KAAM,KAAS,MACzD,4BACE,8BACGR,GAASA,EAAMS,IAAIL,EAAK,IACvB,kBAAC,IAAD,CAAYM,KAAMN,EAAK,GAAIO,KAAMX,EAAMY,IAAIR,EAAK,IAAcS,UAAQ,IAEtET,EAAK,KAIX,4BACE,8BAAOA,EAAK,KAEd,4BAAeA,EAAK,GApEjBU,MAAM,KAEZvB,KAAI,SAACwB,EAASV,GACzB,OAAIA,EAAQ,IAAM,EACT,0BAAMC,IAAKD,GAAQU,GAEnB,kBAAChC,EAAD,CAAYuB,IAAKD,GAAQU,iB,6ECRvBC,IAVsD,SAAC,GAAyB,IAAvBtC,EAAsB,EAAtBA,KAAMuC,EAAgB,EAAhBA,UAAgB,EACtElB,qBADsE,mBACrFmB,EADqF,KAChFC,EADgF,KAO5F,OAJAjB,qBAAU,WACRP,YAAgBjB,GAAMyB,MAAK,SAACe,GAAD,OAASC,EAAO,IAAD,OAAKD,SAC9C,CAACxC,IAEG,kBAAC,IAAD,CAAqBuC,UAAWA,EAAWN,KAAMO,EAAKZ,IAAK5B,EAAMgC,KAAMhC,EAAMmC,UAAQ","file":"static/js/48.df9c977f.chunk.js","sourcesContent":["import React from 'react';\nimport { Pages } from '../../pages';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst props: PropsDefinition = [\n  ['key', true, 'string', 'null', 'The character key code'],\n  ['alt', false, 'boolean', 'null', 'Flag that requires the character to be pressed together with the `Alt` key'],\n  ['control', false, 'boolean', 'null', 'Flag that requires the character to be pressed together with the `Control` key'],\n  ['shift', false, 'boolean', 'null', 'Flag that requires the character to be pressed together with the `Shift` key']\n];\nconst KeyDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>Key</StyledTitle>\n      <StyledIntroduction>\n        The Key type can be used with the <ComponentLink page={Pages.UseKeyboard} /> hook and can identify a <StyledCode>string</StyledCode>{' '}\n        or an object with the following properties.\n      </StyledIntroduction>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n      <StyledIntroduction>\n        The <ComponentLink page={Pages.SpecialKeys} /> contains a set of strings that identify the most used key values on a keyboard.\n      </StyledIntroduction>\n    </>\n  );\n};\n\nexport default KeyDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}