{"version":3,"sources":["views/ComponentLink.tsx","views/pages/AnimationContext.tsx"],"names":["ComponentLink","page","className","dispatch","useContext","DispatchContext","useState","url","setUrl","useEffect","getComponentUrl","then","href","key","text","onClick","props","AnimatedBackground","src","speed","scale","frameId","AnimationContext","reducer","useCallback","position","useReducer","update","tileX","tileScaleY","FrameRateStats","fps","averageFps","minFps","maxFps","AnimationContextExample","PixiTilingSpriteDoc","Pages","PixiCanvas","PixiTilingSprite","style","height"],"mappings":"6KAeeA,IAXsD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACpEC,EAAaC,qBAAWC,KAAxBF,SADoF,EAEtEG,qBAFsE,mBAErFC,EAFqF,KAEhFC,EAFgF,KAQ5F,OAJAC,qBAAU,WACRC,YAAgBT,GAAMU,MAAK,SAAAJ,GAAG,OAAIC,EAAO,IAAD,OAAKD,SAC5C,CAACN,IAEG,kBAAC,IAAD,CAAqBC,UAAWA,EAAWU,KAAML,EAAKM,IAAKZ,EAAMa,KAAMb,EAAMc,QAAS,kBAAMZ,EAASF,Q,+HCHxGe,EAAyB,CAC7B,CAAC,WAAW,EAAM,SAAU,IAAK,mDACjC,CAAC,WAAW,EAAM,SAAU,IAAK,+DACjC,CAAC,OAAO,EAAM,SAAU,IAAK,wCAC7B,CAAC,cAAc,EAAM,SAAU,IAAK,wCACpC,CAAC,UAAU,EAAM,SAAU,IAAK,6BAChC,CAAC,UAAU,EAAM,SAAU,IAAK,6BAChC,CAAC,WAAW,EAAM,WAAY,KAAM,2CAKhCC,EAAwD,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,MAAuB,IAAhBC,aAAgB,MAAR,EAAQ,EACnFC,EAAYjB,qBAAWkB,KAAvBD,QACFE,EAAUC,uBAAY,SAACC,GAAD,OAAcA,EAAWN,IAAO,CAACA,IAF8B,EAGhEO,qBAAWH,EAAS,GAH4C,mBAGpFE,EAHoF,KAG1EE,EAH0E,KAO3F,OAFAlB,oBAAUkB,EAAQ,CAACN,IAGjB,kBAAC,IAAD,CAAkBO,MAAOH,EAAUI,WAAYT,GAC7C,kBAAC,IAAD,CAAaF,IAAKA,MAKlBY,EAA2B,WAAO,IAAD,EACO1B,qBAAWkB,KAA/CS,EAD6B,EAC7BA,IAAKC,EADwB,EACxBA,WAAYC,EADY,EACZA,OAAQC,EADI,EACJA,OAEjC,OACE,yCACYH,EADZ,eAC6BC,EAD7B,WACiDC,EADjD,WACiEC,IAK/DC,EAAoC,WACxC,OACE,kBAAC,IAAD,KACE,kBAAClB,EAAD,CAAoBC,IAAK,6BAA8BC,MAAO,KAC9D,kBAACF,EAAD,CAAoBC,IAAK,iCAAkCC,MAAO,KAClE,kBAACF,EAAD,CAAoBC,IAAK,iCAAkCC,MAAO,EAAGC,MAAO,KAC5E,kBAACU,EAAD,QAgCSM,UA3BuB,WACpC,OACE,oCACE,kBAAC,IAAD,yBACA,kBAAC,IAAD,uFACiF,kBAAC,IAAD,iBADjF,qBACqI,IACnI,kBAAC,IAAD,CAAenC,KAAMoC,IAAMC,aAF7B,mQAIsC,kBAAC,IAAD,yBAJtC,oDAIiI,IAC/H,kBAAC,IAAD,gBALF,0JAOE,6BAPF,mCAQkC,kBAAC,IAAD,CAAerC,KAAMoC,IAAME,mBAR7D,0HAWA,kBAAC,IAAD,CAAOC,MAAO,CAAEC,OAAQ,MACtB,kBAACN,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYjB,IAAK,mDAEnB,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAYF,MAAOA","file":"static/js/35.d1dd0ba6.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { DispatchContext, getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const { dispatch } = useContext(DispatchContext);\n  const [url, setUrl] = useState<string|undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then(url => setUrl(`#${url}`))\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} onClick={() => dispatch(page)} />;\n};\n\nexport default ComponentLink;\n","import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiTexture, PixiTilingSprite, AnimationContext } from 'pixi-reactive';\nimport React, { useCallback, useContext, useEffect, useReducer } from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst props: PropsDefinition = [\n  ['frameId', true, 'number', '0', 'ID of the latest frame generated by the browser'],\n  ['elapsed', true, 'number', '0', 'Elapsed time in milliseconds since the last generated frame'],\n  ['fps', true, 'number', '0', 'Current framerate of the application'],\n  ['averageFps', true, 'number', '0', 'Average framerate of the application'],\n  ['minFps', true, 'number', '0', 'Minimum framerate reached'],\n  ['maxFps', true, 'number', '0', 'Maximum framerate reached'],\n  ['history', true, 'number[]', '[]', 'History of the latest 120 fps recorded']\n];\n\ntype AnimatedBackgroundProps = { src: string; speed: number; scale?: number };\n\nconst AnimatedBackground: React.FC<AnimatedBackgroundProps> = ({ src, speed, scale = 1 }) => {\n  const { frameId } = useContext(AnimationContext);\n  const reducer = useCallback((position) => position - speed, [speed]);\n  const [position, update] = useReducer(reducer, 0);\n\n  useEffect(update, [frameId]);\n\n  return (\n    <PixiTilingSprite tileX={position} tileScaleY={scale}>\n      <PixiTexture src={src} />\n    </PixiTilingSprite>\n  );\n};\n\nconst FrameRateStats: React.FC = () => {\n  const { fps, averageFps, minFps, maxFps } = useContext(AnimationContext);\n\n  return (\n    <div>\n      Current: {fps} - Average: {averageFps} - Min: {minFps} - Max: {maxFps}\n    </div>\n  );\n};\n\nconst AnimationContextExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <AnimatedBackground src={'./static/assets/galaxy.png'} speed={0.1} />\n      <AnimatedBackground src={'./static/assets/slow-stars.png'} speed={0.5} />\n      <AnimatedBackground src={'./static/assets/fast-stars.png'} speed={2} scale={0.5} />\n      <FrameRateStats />\n    </PixiCanvas>\n  );\n};\n\nconst PixiTilingSpriteDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>AnimationContext</StyledTitle>\n      <StyledIntroduction>\n        When you develop your animation in one single React component, you can use the <StyledCode>onUpdate</StyledCode> callback from the{' '}\n        <ComponentLink page={Pages.PixiCanvas} /> to update your animation, but let's be honest, that is unlikely to happen in a real life\n        scenario. You are probably going to create your own components that will need to be able to leave on their own and be reusable as\n        much as possible. That is where the <StyledCode>AnimationContext</StyledCode> comes in hand. It provides you with the property{' '}\n        <StyledCode>frameId</StyledCode> that gets updated every time an animation frame is provided by the browser, which means that you\n        can use it to create a side effect in your component.\n        <br />\n        Let's refactor the example from <ComponentLink page={Pages.PixiTilingSprite} /> to make use of this, and let's have a look at the\n        other performance stats provided by the context while we are there:\n      </StyledIntroduction>\n      <Block style={{ height: 300 }}>\n        <AnimationContextExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/AnimationContextExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={props} />\n    </>\n  );\n};\n\nexport default PixiTilingSpriteDoc;\n"],"sourceRoot":""}