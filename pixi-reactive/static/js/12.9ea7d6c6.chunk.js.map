{"version":3,"sources":["views/pages/TextureContext.tsx","views/PropsTable.tsx","views/CodeViewer.tsx","views/ComponentLink.tsx"],"names":["TextureContextDoc","page","Pages","PixiCanvas","href","text","external","target","PixiAnimatedSprite","src","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","useEffect","then","prop","index","key","f7","size","has","get","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","setCode","fetch","response","style","darcula","language","showLineNumbers","ComponentLink","className","url","setUrl"],"mappings":"iIAAA,8EA+CeA,UAvCqB,WAClC,OACE,oCACE,kBAAC,IAAD,uBACA,kBAAC,IAAD,YACM,kBAAC,IAAD,uBADN,uEACkH,IAChH,kBAAC,IAAD,CAAeC,KAAMC,IAAMC,aAF7B,IAE4C,kBAAC,IAAD,iBAF5C,yCAEoH,IAClH,kBAAC,IAAD,oBAHF,2IAKE,6BALF,8EAM6E,kBAAC,IAAD,aAN7E,uBAM+H,IAC7H,kBAAC,IAAD,CAAYC,KAAM,2CAA4CC,KAAM,gBAAiBC,UAAQ,EAACC,OAAQ,WAPxG,kHAQ+F,kBAAC,IAAD,aAR/F,sJAUc,kBAAC,IAAD,CAAeN,KAAMC,IAAMM,qBAVzC,IAWE,6BAXF,4EAcA,kBAAC,IAAD,4CACsC,kBAAC,IAAD,aADtC,QAEE,kBAAC,IAAD,CAAYC,IAAK,gCAFnB,gEAIE,kBAAC,IAAD,CAAYA,IAAK,iCAJnB,iBAKgB,kBAAC,IAAD,uBALhB,yBAME,kBAAC,IAAD,KACG,sK,0TCxBJ,IAkBHC,EAlBSC,EAAaC,IAAOC,KAAV,KAoBjBC,EAAY,uCAAG,kCAAAC,EAAA,yDACdL,EADc,iCAEGM,YAAgBd,IAAMe,OAFzB,OAEXC,EAFW,OAGXC,EAAM,IAAIC,IAEPC,EAAI,EALI,YAKDA,EAAIH,EAAMI,QALT,iCAMIC,YAAgBL,EAAMG,IAN1B,OAMTG,EANS,OAQfL,EAAIM,IAAIP,EAAMG,GAAd,WAAsBG,IARP,QAKiBH,IALjB,uBAWjBX,EAAaS,EAXI,iCAcZT,GAdY,4CAAH,qDAkEHgB,IAjD0C,SAAC,GAAoB,IAAD,IAAjBC,aAAiB,MAAT,GAAS,IACjDC,qBADiD,mBACpEC,EADoE,KAC7DC,EAD6D,KAO3E,OAJAC,qBAAU,WACRjB,IAAekB,KAAKF,KACnB,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,+BACE,4BACE,oCACA,wCACA,oCACA,uCACA,6CAGJ,+BACGH,EAAMR,KAAI,SAACc,EAAMC,GAChB,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAK,IACV,4BAAKA,EAAK,GAAK,kBAAC,IAAD,CAAMG,GAAI,gBAAiBC,KAAM,KAAS,MACzD,4BACE,8BACGR,GAASA,EAAMS,IAAIL,EAAK,IACvB,kBAAC,IAAD,CAAY5B,KAAM4B,EAAK,GAAI7B,KAAMyB,EAAMU,IAAIN,EAAK,IAAc3B,UAAQ,IAEtE2B,EAAK,KAIX,4BACE,8BAAOA,EAAK,KAEd,4BAAeA,EAAK,GApEjBO,MAAM,KAEZrB,KAAI,SAACsB,EAASP,GACzB,OAAIA,EAAQ,IAAM,EACT,0BAAMC,IAAKD,GAAQO,GAEnB,kBAAC9B,EAAD,CAAYwB,IAAKD,GAAQO,iB,wFCjBtCC,IAAkBC,iBAAiB,MAAOC,KAyB3BC,IAvBoD,SAAC,GAA4B,IAA1BpC,EAAyB,EAAzBA,IAAyB,IAApBqC,gBAAoB,MAAT,GAAS,IACrElB,mBAASkB,GAD4D,mBACtFjC,EADsF,KAChFkC,EADgF,KAe7F,OAZAhB,qBAAU,WACJtB,GACFuC,MAAMvC,GAAKuB,MAAK,SAAAiB,GAAQ,OAAIA,EAAS5C,UAAQ2B,MAAK,SAAA3B,GAAI,OAAI0C,EAAQ1C,QAEnE,CAACI,IAEJsB,qBAAU,WACJe,GACFC,EAAQD,KAET,CAACA,IAIF,kBAAC,IAAD,CAAmBI,MAAOC,IAASC,SAAU,MAAOC,iBAAe,GAChExC,K,6ECXQyC,IAVsD,SAAC,GAAyB,IAAvBrD,EAAsB,EAAtBA,KAAMsD,EAAgB,EAAhBA,UAAgB,EACtE3B,qBADsE,mBACrF4B,EADqF,KAChFC,EADgF,KAO5F,OAJA1B,qBAAU,WACRR,YAAgBtB,GAAM+B,MAAK,SAACwB,GAAD,OAASC,EAAO,IAAD,OAAKD,SAC9C,CAACvD,IAEG,kBAAC,IAAD,CAAqBsD,UAAWA,EAAWnD,KAAMoD,EAAKrB,IAAKlC,EAAMI,KAAMJ,EAAMK,UAAQ","file":"static/js/12.9ea7d6c6.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport { StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledLink, StyledTitle } from '../StyledComponents';\n\nconst TextureContextDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>TextureContext</StyledTitle>\n      <StyledIntroduction>\n        The <StyledCode>TextureContext</StyledCode> is mostly for internal use; when a list of sources is passed to the{' '}\n        <ComponentLink page={Pages.PixiCanvas} /> <StyledCode>textures</StyledCode> property, those are downloaded by the{' '}\n        <StyledCode>PIXI.Loader</StyledCode> and the resulting textures are stored in this context. In this way, all the sprite components\n        can easily access them using their names.\n        <br />\n        The texture list can include any type of image files, but it also supports <StyledCode>JSON</StyledCode> files created using{' '}\n        <StyledLink href={'https://www.codeandweb.com/texturepacker'} text={'TexturePacker'} external target={'_blank'} />. When you load a\n        packed texture, the exploded textures will be associated with the names they have inside the <StyledCode>JSON</StyledCode> file\n        (minus the extensions). The name used in the list will be associated with an array of texture names that can be used to load the\n        frames as a <ComponentLink page={Pages.PixiAnimatedSprite} />.\n        <br />\n        It sounds a bit farfetched, but the following example should clarify it:\n      </StyledIntroduction>\n      <Block>\n        Assuming this is the content of the <StyledCode>JSON</StyledCode> file\n        <CodeViewer src={'./static/assets/colors.json'} />\n        And this is the file list you are going to pass to the loader\n        <CodeViewer src={'./static/assets/imports.json'} />\n        The resulting <StyledCode>TextureContext</StyledCode> will be the following\n        <CodeViewer>\n          {'{\\n' +\n            '  galaxy: PIXI.Texture,\\n' +\n            '  ship: PIXI.Texture,\\n' +\n            '  blue: PIXI.Texture,\\n' +\n            '  green: PIXI.Texture,\\n' +\n            '  red: PIXI.Texture,\\n' +\n            \"  colors: ['blue', 'green', 'red'],\\n\" +\n            '}'}\n        </CodeViewer>\n      </Block>\n    </>\n  );\n};\n\nexport default TextureContextDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    // @ts-ignore\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}