{"version":3,"sources":["views/pages/PixiHtmlContainer.tsx"],"names":["textureProps","textures","galaxy","ship","Balloon","styled","div","PixiHtmlContainerExample","useState","trackSize","setTrackSize","resize","useCallback","size","width","reducer","position","useReducer","update","onResize","onUpdate","overflow","Overflow","None","texture","x","alignY","PixiHtmlContainerDoc","style","height","src","props"],"mappings":"2dAQA,IAAMA,EAAgC,CACpC,CAAC,MAAM,EAAO,SAAU,OAAQ,yDAChC,CAAC,YAAY,EAAO,WAAY,eAAgB,0EAG5CC,EAAW,CACfC,OAAQ,4BACRC,KAAM,gCAGFC,EAAUC,IAAOC,IAAV,KAWPC,EAAqC,WAAO,IAAD,EACbC,mBAAS,GADI,mBACxCC,EADwC,KAC7BC,EAD6B,KAEzCC,EAASC,uBAAY,SAACC,GAAD,OAAUH,EAAaG,EAAKC,MAAQ,OAAM,IAC/DC,EAAUH,uBAAY,SAACI,GAAD,OAAeA,EAAW,GAAKP,IAAW,CAACA,IAHxB,EAKpBQ,qBAAWF,EAAS,GALA,mBAKxCC,EALwC,KAK9BE,EAL8B,KAO/C,OACE,kBAAC,IAAD,CAAYjB,SAAUA,EAAUkB,SAAUR,EAAQS,SAAUF,EAAQG,SAAUC,IAASC,MACrF,kBAAC,IAAD,CAAkBC,QAAS,WAC3B,kBAAC,IAAD,CAAYA,QAAS,OAAQC,EAAGT,EAAW,IAAKU,OAAQ,IACtD,kBAAC,IAAD,KACE,kBAACtB,EAAD,KAAU,oBA6BLuB,UAtBwB,WACrC,OACE,oCACE,kBAAC,IAAD,0BACA,kBAAC,IAAD,YACM,kBAAC,IAAD,0BADN,cAC2D,kBAAC,IAAD,YAD3D,wVAMA,kBAAC,IAAD,CAAOC,MAAO,CAAEC,OAAQ,MACtB,kBAACtB,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYuB,IAAK,mDAEnB,kBAAC,IAAD,mBACA,kBAAC,IAAD,CAAYC,MAAO/B","file":"static/js/61.0fbee91b.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiHtmlContainer, PixiTilingSprite, PixiSprite, Overflow } from 'pixi-reactive';\nimport React, { useCallback, useReducer, useState } from 'react';\nimport styled from 'styled-components';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst textureProps: PropsDefinition = [\n  ['id', false, 'string', 'null', 'Name or ID that will be assigned to the `DIV` element'],\n  ['overflow', false, 'Overflow', 'Overflow.All', 'Whether HTML children should be seen if they overflow their container']\n];\n\nconst textures = {\n  galaxy: '/static/assets/galaxy.png',\n  ship: '/static/assets/spaceship.png'\n};\n\nconst Balloon = styled.div`\n  width: calc(100% - 10px);\n  padding: 5px;\n  background: white;\n  border: solid 2px black;\n  border-radius: 5px;\n  margin-top: 120px;\n  color: black;\n  text-align: center;\n`;\n\nconst PixiHtmlContainerExample: React.FC = () => {\n  const [trackSize, setTrackSize] = useState(0);\n  const resize = useCallback((size) => setTrackSize(size.width + 300), []);\n  const reducer = useCallback((position) => (position + 1) % trackSize, [trackSize]);\n\n  const [position, update] = useReducer(reducer, 0);\n\n  return (\n    <PixiCanvas textures={textures} onResize={resize} onUpdate={update} overflow={Overflow.None}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite texture={'ship'} x={position - 150} alignY={0.5}>\n        <PixiHtmlContainer>\n          <Balloon>{'Spaceship #1'}</Balloon>\n        </PixiHtmlContainer>\n      </PixiSprite>\n    </PixiCanvas>\n  );\n};\n\nconst PixiHtmlContainerDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>PixiHtmlContainer</StyledTitle>\n      <StyledIntroduction>\n        The <StyledCode>PixiHtmlContainer</StyledCode> creates a <StyledCode>DIV</StyledCode> element that matches in size, position and\n        transform matrix to the parent Pixi element. This allow to have HTML content that hover on a graphic object. It's a simple way to\n        mix different content types if, for example, you want to create a tooltip, a balloon or just have text context rendered in the HTML\n        dom without using WebGL resources.\n      </StyledIntroduction>\n      <Block style={{ height: 250 }}>\n        <PixiHtmlContainerExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'/static/examples/PixiHtmlContainerExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={textureProps} />\n    </>\n  );\n};\n\nexport default PixiHtmlContainerDoc;\n"],"sourceRoot":""}