{"version":3,"sources":["views/pages/ImpactContext.tsx","views/PropsTable.tsx","views/CodeViewer.tsx"],"names":["Ball","color","initialDirection","align","useReducer","direction","updateDirection","position","updatePosition","frameId","useContext","AnimationContext","useEffect","alignY","alignX","x","detectImpacts","onImpact","width","height","radius","y","ImpactContextExample","ImpactContextDoc","style","src","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","then","prop","index","f7","size","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","setCode","fetch","response","darcula","language","showLineNumbers"],"mappings":"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","file":"static/js/79.1cfb04e2.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiSprite, PixiRenderTexture, PixiGraphics, Circle, FillStyle, AnimationContext } from 'pixi-reactive';\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport CodeViewer from '../CodeViewer';\nimport { StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledTitle } from '../StyledComponents';\n\ntype BallType = {\n  color: number;\n  initialDirection: 1 | -1;\n  align: number;\n};\n\nconst Ball: React.FC<BallType> = ({ color, initialDirection, align }) => {\n  const [direction, updateDirection] = useReducer((direction) => (direction < 0 ? 1 : -1), initialDirection);\n  const [position, updatePosition] = useReducer((position) => position + direction, 0);\n  const { frameId } = useContext(AnimationContext);\n\n  useEffect(updatePosition, [frameId]);\n\n  useEffect(() => {\n    if (position === -initialDirection) {\n      updateDirection();\n    }\n  }, [position, initialDirection]);\n\n  return (\n    <PixiSprite alignY={0.5} alignX={align} x={position} detectImpacts={true} onImpact={updateDirection}>\n      <PixiRenderTexture width={80} height={80}>\n        <PixiGraphics>\n          <Circle radius={40} x={40} y={40}>\n            <FillStyle color={color} />\n          </Circle>\n        </PixiGraphics>\n      </PixiRenderTexture>\n    </PixiSprite>\n  );\n};\n\nconst ImpactContextExample: React.FC = () => {\n  return (\n    <PixiCanvas width={350}>\n      <Ball color={0xff0000} align={0} initialDirection={1} />\n      <Ball color={0x00ff00} align={1} initialDirection={-1} />\n    </PixiCanvas>\n  );\n};\n\nconst ImpactContextDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>ImpactContext</StyledTitle>\n      <StyledIntroduction>\n        The <StyledCode>ImpactContext</StyledCode> is used internally to determine whether two or more elements impact with each others. In\n        order to make an object capable of detecting impacts, it will require the <StyledCode>detectImpacts</StyledCode> to be set to{' '}\n        <StyledCode>true</StyledCode>. Whenever an impact is detected, the <StyledCode>onImpact</StyledCode> callback is executed.\n        <br />\n        An object can be set to detect only a certain type of impacts. To achieve that you need to set the{' '}\n        <StyledCode>impactClassName</StyledCode> or give the component a <StyledCode>name</StyledCode>. Once that is set, you can add a list\n        of component classes or names in the <StyledCode>impactFilter</StyledCode> property.\n        <br />\n        Finally, by default the impact area will be as big as the component, if you want to reduce or expand such area, you can set the{' '}\n        <StyledCode>impactArea</StyledCode> to reflect the area you want to be detected during impacts.\n      </StyledIntroduction>\n      <Block style={{ height: 150 }}>\n        <ImpactContextExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/ImpactContextExample.tsx'} />\n      </Block>\n    </>\n  );\n};\n\nexport default ImpactContextDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n"],"sourceRoot":""}