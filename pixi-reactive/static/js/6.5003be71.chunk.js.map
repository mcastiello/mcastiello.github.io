{"version":3,"sources":["views/pages/TextureContext.tsx","views/CodeViewer.tsx","views/PropsTable.tsx","views/ComponentLink.tsx"],"names":["TextureContextDoc","page","Pages","PixiCanvas","href","text","external","target","PixiAnimatedSprite","src","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","useState","code","setCode","useEffect","fetch","then","response","style","darcula","language","showLineNumbers","StyledCode","styled","PropsTable","props","dispatch","useContext","DispatchContext","types","setTypes","getPageChildren","Types","map","prop","index","key","f7","size","includes","onClick","split","content","ComponentLink","className","url","setUrl","getComponentUrl"],"mappings":"gIAAA,8EA+CeA,UAvCqB,WAClC,OACE,oCACE,kBAAC,IAAD,uBACA,kBAAC,IAAD,YACM,kBAAC,IAAD,uBADN,uEACkH,IAChH,kBAAC,IAAD,CAAeC,KAAMC,IAAMC,aAF7B,IAE4C,kBAAC,IAAD,iBAF5C,yCAEoH,IAClH,kBAAC,IAAD,oBAHF,2IAKE,6BALF,8EAM6E,kBAAC,IAAD,aAN7E,uBAM+H,IAC7H,kBAAC,IAAD,CAAYC,KAAM,2CAA4CC,KAAM,gBAAiBC,UAAQ,EAACC,OAAQ,WAPxG,kHAQ+F,kBAAC,IAAD,aAR/F,sJAUc,kBAAC,IAAD,CAAeN,KAAMC,IAAMM,qBAVzC,IAWE,6BAXF,4EAcA,kBAAC,IAAD,4CACsC,kBAAC,IAAD,aADtC,QAEE,kBAAC,IAAD,CAAYC,IAAK,+BAFnB,gEAIE,kBAAC,IAAD,CAAYA,IAAK,gCAJnB,iBAKgB,kBAAC,IAAD,uBALhB,yBAME,kBAAC,IAAD,KACG,sK,wFC5BXC,IAAkBC,iBAAiB,MAAOC,KAyB3BC,IAvBoD,SAAC,GAA4B,IAA1BJ,EAAyB,EAAzBA,IAAyB,IAApBK,gBAAoB,MAAT,GAAS,IACrEC,mBAASD,GAD4D,mBACtFE,EADsF,KAChFC,EADgF,KAe7F,OAZAC,qBAAU,WACJT,GACFU,MAAMV,GAAKW,MAAK,SAAAC,GAAQ,OAAIA,EAAShB,UAAQe,MAAK,SAAAf,GAAI,OAAIY,EAAQZ,QAEnE,CAACI,IAEJS,qBAAU,WACJJ,GACFG,EAAQH,KAET,CAACA,IAIF,kBAAC,IAAD,CAAmBQ,MAAOC,IAASC,SAAU,MAAOC,iBAAe,GAChET,K,iSChBA,IAAMU,EAAaC,IAAOX,KAAV,KAoERY,IAlD0C,SAAC,GAAoB,IAAD,IAAjBC,aAAiB,MAAT,GAAS,EACnEC,EAAaC,qBAAWC,KAAxBF,SADmE,EAEjDf,mBAAkB,IAF+B,mBAEpEkB,EAFoE,KAE7DC,EAF6D,KAQ3E,OAJAhB,qBAAU,WACRiB,YAAgBjC,IAAMkC,OAAOhB,KAAKc,KACjC,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,+BACE,4BACE,oCACA,wCACA,oCACA,uCACA,6CAGJ,+BACGL,EAAMQ,KAAI,SAACC,EAAMC,GAChB,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAK,IACV,4BAAKA,EAAK,GAAK,kBAAC,IAAD,CAAMG,GAAI,gBAAiBC,KAAM,KAAS,MACzD,4BACE,8BACGT,EAAMU,SAASL,EAAK,IACnB,kBAAC,IAAD,CAAYjC,KAAMiC,EAAK,GAAIM,QAAS,kBAAMd,EAASQ,EAAK,OAExDA,EAAK,KAIX,4BACE,8BAAOA,EAAK,KAEd,4BAAeA,EAAK,GAlDjBO,MAAM,KAEZR,KAAI,SAACS,EAASP,GACzB,OAAIA,EAAQ,IAAM,EACT,0BAAMC,IAAKD,GAAQO,GAEnB,kBAACpB,EAAD,CAAYc,IAAKD,GAAQO,iB,6ECPvBC,IAXsD,SAAC,GAAyB,IAAvB9C,EAAsB,EAAtBA,KAAM+C,EAAgB,EAAhBA,UACpElB,EAAaC,qBAAWC,KAAxBF,SADoF,EAEtEf,qBAFsE,mBAErFkC,EAFqF,KAEhFC,EAFgF,KAQ5F,OAJAhC,qBAAU,WACRiC,YAAgBlD,GAAMmB,MAAK,SAAA6B,GAAG,OAAIC,EAAO,IAAD,OAAKD,SAC5C,CAAChD,IAEG,kBAAC,IAAD,CAAqB+C,UAAWA,EAAW5C,KAAM6C,EAAKT,IAAKvC,EAAMI,KAAMJ,EAAM2C,QAAS,kBAAMd,EAAS7B","file":"static/js/6.5003be71.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport { StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledLink, StyledTitle } from '../StyledComponents';\n\nconst TextureContextDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>TextureContext</StyledTitle>\n      <StyledIntroduction>\n        The <StyledCode>TextureContext</StyledCode> is mostly for internal use; when a list of sources is passed to the{' '}\n        <ComponentLink page={Pages.PixiCanvas} /> <StyledCode>textures</StyledCode> property, those are downloaded by the{' '}\n        <StyledCode>PIXI.Loader</StyledCode> and the resulting textures are stored in this context. In this way, all the sprite components\n        can easily access them using their names.\n        <br />\n        The texture list can include any type of image files, but it also supports <StyledCode>JSON</StyledCode> files created using{' '}\n        <StyledLink href={'https://www.codeandweb.com/texturepacker'} text={'TexturePacker'} external target={'_blank'} />. When you load a\n        packed texture, the exploded textures will be associated with the names they have inside the <StyledCode>JSON</StyledCode> file\n        (minus the extensions). The name used in the list will be associated with an array of texture names that can be used to load the\n        frames as a <ComponentLink page={Pages.PixiAnimatedSprite} />.\n        <br />\n        It sounds a bit farfetched, but the following example should clarify it:\n      </StyledIntroduction>\n      <Block>\n        Assuming this is the content of the <StyledCode>JSON</StyledCode> file\n        <CodeViewer src={'/static/assets/colors.json'} />\n        And this is the file list you are going to pass to the loader\n        <CodeViewer src={'/static/assets/imports.json'} />\n        The resulting <StyledCode>TextureContext</StyledCode> will be the following\n        <CodeViewer>\n          {'{\\n' +\n            '  galaxy: PIXI.Texture,\\n' +\n            '  ship: PIXI.Texture,\\n' +\n            '  blue: PIXI.Texture,\\n' +\n            '  green: PIXI.Texture,\\n' +\n            '  red: PIXI.Texture,\\n' +\n            \"  colors: ['blue', 'green', 'red'],\\n\" +\n            '}'}\n        </CodeViewer>\n      </Block>\n    </>\n  );\n};\n\nexport default TextureContextDoc;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    // @ts-ignore\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useContext, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { DispatchContext, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const { dispatch } = useContext(DispatchContext);\n  const [types, setTypes] = useState<Pages[]>([]);\n\n  useEffect(() => {\n    getPageChildren(Pages.Types).then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types.includes(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} onClick={() => dispatch(prop[2] as Pages)} />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { DispatchContext, getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const { dispatch } = useContext(DispatchContext);\n  const [url, setUrl] = useState<string|undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then(url => setUrl(`#${url}`))\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} onClick={() => dispatch(page)} />;\n};\n\nexport default ComponentLink;\n"],"sourceRoot":""}