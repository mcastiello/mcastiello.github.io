{"version":3,"sources":["views/pages/LineJoin.tsx","views/PropsTable.tsx","views/CodeViewer.tsx","views/EnumeratorList.tsx"],"names":["LineJoinDoc","name","enumerator","LineJoin","src","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","setCode","fetch","response","style","darcula","language","showLineNumbers","EnumeratorList","codeLines","Object","keys","filter","item","test","toLowerCase","join","target"],"mappings":"6KAceA,UAVe,WAC5B,OACE,cAAC,IAAD,CACEC,KAAM,WACNC,WAAYC,IACZC,IAAK,yF,yTCAJ,IAkBHC,EAlBSC,EAAaC,IAAOC,KAAV,KAoBjBC,EAAY,uCAAG,kCAAAC,EAAA,yDACdL,EADc,iCAEGM,YAAgBC,IAAMC,OAFzB,OAEXC,EAFW,OAGXC,EAAM,IAAIC,IAEPC,EAAI,EALI,YAKDA,EAAIH,EAAMI,QALT,iCAMIC,YAAgBL,EAAMG,IAN1B,OAMTG,EANS,OAQfL,EAAIM,IAAIP,EAAMG,GAAd,WAAsBG,IARP,QAKiBH,IALjB,uBAWjBZ,EAAaU,EAXI,iCAcZV,GAdY,4CAAH,qDAkEHiB,IAjD0C,SAAC,GAAoB,IAAD,IAAjBC,aAAiB,MAAT,GAAS,IACjDC,qBADiD,mBACpEC,EADoE,KAC7DC,EAD6D,KAO3E,OAJAC,qBAAU,WACRlB,IAAemB,KAAKF,KACnB,IAGD,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,gCACE,+BACE,sCACA,0CACA,sCACA,yCACA,kDAGJ,gCACGH,EAAMR,KAAI,SAACc,EAAMC,GAChB,OACE,+BACE,6BAAKD,EAAK,KACV,6BAAKA,EAAK,GAAK,cAAC,IAAD,CAAME,GAAI,gBAAiBC,KAAM,KAAS,OACzD,6BACE,+BACGP,GAASA,EAAMQ,IAAIJ,EAAK,IACvB,cAAC,IAAD,CAAYK,KAAML,EAAK,GAAIM,KAAMV,EAAMW,IAAIP,EAAK,IAAcQ,UAAQ,IAEtER,EAAK,OAIX,6BACE,+BAAOA,EAAK,OAEd,8BArEQK,EAqEOL,EAAK,GApEtBK,EAAKI,MAAM,KAEZvB,KAAI,SAACwB,EAAST,GACzB,OAAIA,EAAQ,IAAM,EACT,+BAAmBS,GAART,GAEX,cAACxB,EAAD,UAAyBiC,GAART,WA+CLA,GAtDA,IAACI,gB,uFCV1BM,IAAkBC,iBAAiB,MAAOC,KAwB3BC,IAtBoD,SAAC,GAA4B,IAA1BvC,EAAyB,EAAzBA,IAAyB,IAApBwC,gBAAoB,MAAT,GAAS,IACrEpB,mBAASoB,GAD4D,mBACtFpC,EADsF,KAChFqC,EADgF,KAe7F,OAZAlB,qBAAU,WACJvB,GACF0C,MAAM1C,GAAKwB,MAAK,SAAAmB,GAAQ,OAAIA,EAASb,UAAQN,MAAK,SAAAM,GAAI,OAAIW,EAAQX,QAEnE,CAAC9B,IAEJuB,qBAAU,WACJiB,GACFC,EAAQD,KAET,CAACA,IAGF,cAAC,IAAD,CAAmBI,MAAOC,IAASC,SAAU,MAAOC,iBAAe,EAAnE,SACG3C,M,sFCKQ4C,IAxBmE,SAAC,GAA+B,IAA7BnD,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,WAAYE,EAAU,EAAVA,IAAU,EACvFoB,mBAAS,IAD8E,mBACxGhB,EADwG,KAClGqC,EADkG,KAU/G,OAPAlB,qBAAU,WACR,IAAM0B,EAAYC,OAAOC,KAAKrD,GAC3BsD,QAAO,SAACC,GAAD,OAAW,QAAQC,KAAKD,MAC/B1C,KAAI,SAAC0C,GAAD,sBAAmBA,EAAKE,cAAxB,cAA2C1D,EAA3C,YAAmDwD,EAAnD,gBAA+DvD,EAAWuD,OACjFZ,EAAQ,YAAD,OAAa5C,EAAb,uCAAgDoD,EAAUO,KAAK,UACrE,CAAC3D,EAAMC,IAGR,qCACE,eAAC,IAAD,WAAcD,EAAd,iBACCG,GACC,eAAC,IAAD,kDACsC,cAAC,IAAD,UAAaH,IADnD,oBACuF,IACrF,cAAC,IAAD,CAAYkC,KAAM/B,EAAK8B,KAAM,OAAQG,UAAQ,EAACwB,OAAQ,WAFxD,OAKF,cAAC,IAAD,UAAarD","file":"static/js/67.470f6e75.chunk.js","sourcesContent":["import React from 'react';\nimport EnumeratorList from '../EnumeratorList';\nimport { LineJoin } from 'pixi-reactive';\n\nconst LineJoinDoc: React.FC = () => {\n  return (\n    <EnumeratorList\n      name={'LineJoin'}\n      enumerator={LineJoin}\n      src={'https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin'}\n    />\n  );\n};\n\nexport default LineJoinDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from \"react\";\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { useEffect, useState } from 'react';\nimport CodeViewer from './CodeViewer';\nimport { StyledCode } from './PropsTable';\nimport { StyledIntroduction, StyledLink, StyledTitle } from './StyledComponents';\n\nconst EnumeratorList: React.FC<{ name: string; enumerator: any; src?: string }> = ({ name, enumerator, src }) => {\n  const [code, setCode] = useState('');\n\n  useEffect(() => {\n    const codeLines = Object.keys(enumerator)\n      .filter((item) => !/^\\d+$/.test(item))\n      .map((item) => `const ${item.toLowerCase()} = ${name}.${item}; // ${enumerator[item]}`);\n    setCode(`import { ${name} } from 'pixi-reactive';\\n\\n${codeLines.join('\\n')}`);\n  }, [name, enumerator]);\n\n  return (\n    <>\n      <StyledTitle>{name} Enumerator</StyledTitle>\n      {src && (\n        <StyledIntroduction>\n          You can find more information about <StyledCode>{name}</StyledCode> at the following{' '}\n          <StyledLink href={src} text={'link'} external target={'_blank'} />.\n        </StyledIntroduction>\n      )}\n      <CodeViewer>{code}</CodeViewer>\n    </>\n  );\n};\n\nexport default EnumeratorList;\n"],"sourceRoot":""}