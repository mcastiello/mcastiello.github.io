{"version":3,"sources":["views/PropsTable.tsx","views/CodeViewer.tsx","views/ComponentLink.tsx","views/pages/PixiTexture.tsx"],"names":["pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","props","useState","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","src","children","setCode","fetch","response","style","darcula","language","showLineNumbers","ComponentLink","page","className","url","setUrl","textureProps","textureEvents","PixiTextureExample","alignY","alignX","name","PixiTextureDoc","PixiSprite","PixiAnimatedSprite","PixiTilingSprite","PixiMask","height"],"mappings":"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","file":"static/js/52.a763afe8.chunk.js","sourcesContent":["import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n","import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiTexture, PixiSprite } from 'pixi-reactive';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nexport const textureProps: PropsDefinition = [\n  ['name', false, 'string', 'null', 'Name or ID of the texture'],\n  ['src', true, 'string', 'null', 'Path to the asset to be loaded']\n];\nexport const textureEvents: PropsDefinition = [['onLoad', false, 'function', 'null', 'Triggered when the source image is loaded']];\n\nconst PixiTextureExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiSprite alignY={0.5} alignX={0.5}>\n        <PixiTexture name={'ship'} src={'./static/assets/spaceship.png'} />\n      </PixiSprite>\n    </PixiCanvas>\n  );\n};\n\nconst PixiTextureDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>PixiTexture</StyledTitle>\n      <StyledIntroduction>\n        A texture is a reference to an image or graphic asset that can be used as source for a <ComponentLink page={Pages.PixiSprite} />, a{' '}\n        <ComponentLink page={Pages.PixiAnimatedSprite} />, a <ComponentLink page={Pages.PixiTilingSprite} /> or a{' '}\n        <ComponentLink page={Pages.PixiMask} />. The texture element can be added as a child component to the sprite components and it will\n        trigger an onLoad event when the source image is ready to be displayed.\n      </StyledIntroduction>\n      <Block style={{ height: 150 }}>\n        <PixiTextureExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PixiTextureExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={textureProps} />\n      <StyledSectionTitle>Event Callbacks</StyledSectionTitle>\n      <PropsTable props={textureEvents} />\n    </>\n  );\n};\n\nexport default PixiTextureDoc;\n"],"sourceRoot":""}