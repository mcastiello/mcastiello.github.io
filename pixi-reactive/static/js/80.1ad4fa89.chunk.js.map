{"version":3,"sources":["views/pages/PixiHtmlContainer.tsx","views/PropsTable.tsx","views/CodeViewer.tsx"],"names":["textureProps","textures","galaxy","ship","Balloon","styled","div","PixiHtmlContainerExample","useState","trackSize","setTrackSize","resize","useCallback","size","width","reducer","position","useReducer","update","onResize","onUpdate","overflow","Overflow","None","texture","x","alignY","PixiHtmlContainerDoc","style","height","src","props","pageUrlMap","StyledCode","code","getTypeLinks","a","getPageChildren","Pages","Types","pages","map","Map","i","length","getComponentUrl","path","set","PropsTable","types","setTypes","useEffect","then","prop","index","f7","has","text","href","get","external","split","content","SyntaxHighlighter","registerLanguage","tsx","CodeViewer","children","setCode","fetch","response","darcula","language","showLineNumbers"],"mappings":"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","file":"static/js/80.1ad4fa89.chunk.js","sourcesContent":["import { Block } from 'framework7-react';\nimport { PixiCanvas, PixiHtmlContainer, PixiTilingSprite, PixiSprite, Overflow } from 'pixi-reactive';\nimport React, { useCallback, useReducer, useState } from 'react';\nimport styled from 'styled-components';\nimport CodeViewer from '../CodeViewer';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nconst textureProps: PropsDefinition = [\n  ['id', false, 'string', 'null', 'Name or ID that will be assigned to the `DIV` element'],\n  ['overflow', false, 'Overflow', 'Overflow.All', 'Whether HTML children should be seen if they overflow their container']\n];\n\nconst textures = {\n  galaxy: './static/assets/galaxy.png',\n  ship: './static/assets/spaceship.png'\n};\n\nconst Balloon = styled.div`\n  width: calc(100% - 10px);\n  padding: 5px;\n  background: white;\n  border: solid 2px black;\n  border-radius: 5px;\n  margin-top: 120px;\n  color: black;\n  text-align: center;\n`;\n\nconst PixiHtmlContainerExample: React.FC = () => {\n  const [trackSize, setTrackSize] = useState(0);\n  const resize = useCallback((size) => setTrackSize(size.width + 300), []);\n  const reducer = useCallback((position) => (position + 1) % trackSize, [trackSize]);\n\n  const [position, update] = useReducer(reducer, 0);\n\n  return (\n    <PixiCanvas textures={textures} onResize={resize} onUpdate={update} overflow={Overflow.None}>\n      <PixiTilingSprite texture={'galaxy'} />\n      <PixiSprite texture={'ship'} x={position - 150} alignY={0.5}>\n        <PixiHtmlContainer>\n          <Balloon>{'Spaceship #1'}</Balloon>\n        </PixiHtmlContainer>\n      </PixiSprite>\n    </PixiCanvas>\n  );\n};\n\nconst PixiHtmlContainerDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>PixiHtmlContainer</StyledTitle>\n      <StyledIntroduction>\n        The <StyledCode>PixiHtmlContainer</StyledCode> creates a <StyledCode>DIV</StyledCode> element that matches in size, position and\n        transform matrix to the parent Pixi element. This allow to have HTML content that hover on a graphic object. It's a simple way to\n        mix different content types if, for example, you want to create a tooltip, a balloon or just have text context rendered in the HTML\n        dom without using WebGL resources.\n      </StyledIntroduction>\n      <Block style={{ height: 250 }}>\n        <PixiHtmlContainerExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PixiHtmlContainerExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={textureProps} />\n    </>\n  );\n};\n\nexport default PixiHtmlContainerDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { ReactText, useEffect, useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nconst CodeViewer: React.FC<{src?: string, children?: ReactText}> = ({ src, children = '' }) => {\n  const [code, setCode] = useState(children);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src).then(response => response.text()).then(text => setCode(text));\n    }\n  }, [src]);\n\n  useEffect(() => {\n    if (children) {\n      setCode(children);\n    }\n  }, [children]);\n\n  return (\n    <SyntaxHighlighter style={darcula} language={'tsx'} showLineNumbers>\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default CodeViewer;\n"],"sourceRoot":""}