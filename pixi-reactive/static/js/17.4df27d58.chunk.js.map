{"version":3,"sources":["views/pages/Path.tsx","views/PropsTable.tsx","views/ComponentLink.tsx","views/pages/Polygon.tsx"],"names":["PathExample","color","width","x","y","DrawPathExample","useState","drawing","setDrawing","paths","setPaths","onMove","useCallback","point","length","currentPath","onStart","newPath","onEnd","clear","onInteractionStart","onInteractionMove","onInteractionEnd","background","map","path","pathId","key","pointId","iconOnly","iconF7","onClick","PathDoc","page","Pages","Point","style","height","src","props","shapeProps","pageUrlMap","StyledCode","styled","code","getTypeLinks","a","getPageChildren","Types","pages","Map","i","getComponentUrl","set","PropsTable","types","setTypes","useEffect","then","prop","index","f7","size","has","text","href","get","external","split","content","ComponentLink","className","url","setUrl","PolygonExample","PolygonDoc"],"mappings":"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","file":"static/js/17.4df27d58.chunk.js","sourcesContent":["import { Block, Link } from 'framework7-react';\nimport { LineStyle, PixiCanvas, PixiGraphics, Path, Point } from 'pixi-reactive';\nimport React, { useCallback, useState } from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\nimport { shapeProps } from './Polygon';\n\nexport const PathExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiGraphics>\n        <Path>\n          <LineStyle color={0xff0000} width={10} />\n          <Point x={20} y={80} />\n          <Point x={70} y={170} />\n          <Point x={120} y={20} />\n          <Point x={320} y={60} />\n        </Path>\n      </PixiGraphics>\n    </PixiCanvas>\n  );\n};\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\nexport const DrawPathExample: React.FC = () => {\n  const [drawing, setDrawing] = useState(false);\n  const [paths, setPaths] = useState<Point[][]>([]);\n\n  const onMove = useCallback(\n    (point: Point) => {\n      if (drawing && paths.length > 0) {\n        const currentPath = [...paths[paths.length - 1], point];\n        paths.length = paths.length - 1;\n\n        setPaths([...paths, currentPath]);\n      }\n    },\n    [drawing, paths]\n  );\n\n  const onStart = useCallback(\n    (point: Point) => {\n      const newPath = [point];\n      setPaths([...paths, newPath]);\n      setDrawing(true);\n    },\n    [paths]\n  );\n\n  const onEnd = useCallback(() => setDrawing(false), []);\n\n  const clear = useCallback(() => setPaths([]), []);\n\n  return (\n    <PixiCanvas onInteractionStart={onStart} onInteractionMove={onMove} onInteractionEnd={onEnd} background={0xffffff}>\n      {paths.map((path, pathId) => {\n        return (\n          <PixiGraphics key={`path-${pathId}`}>\n            <Path>\n              <LineStyle color={0xff0000} width={3} />\n              {path.map((point, pointId) => {\n                return <Point key={`point-${pointId}`} {...point} />;\n              })}\n            </Path>\n          </PixiGraphics>\n        );\n      })}\n      <Link iconOnly iconF7={'clear'} color={'black'} onClick={clear} />\n    </PixiCanvas>\n  );\n};\n\nconst PathDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>Path</StyledTitle>\n      <StyledIntroduction>\n        It draws a Path on the canvas. The shape is defined by a list of <ComponentLink page={Pages.Point} /> component that identify the{' '}\n        <StyledCode>x</StyledCode> and <StyledCode>y</StyledCode> coordinates of the points along the path.\n      </StyledIntroduction>\n      <Block style={{ height: 200 }}>\n        <PathExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PathExample.tsx'} />\n      </Block>\n      <Block style={{ height: 400 }}>\n        Try to draw on the canvas below ;-)\n        <DrawPathExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/DrawPathExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={shapeProps} />\n    </>\n  );\n};\n\nexport default PathDoc;\n","import { Block, Icon } from 'framework7-react';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getComponentUrl, getPageChildren, Pages } from '../pages';\nimport { StyledTable, StyledLink, StyledTableContainer } from './StyledComponents';\n\ntype PropDefinition = [string, boolean, string, string, string];\nexport type PropsDefinition = PropDefinition[];\n\nexport const StyledCode = styled.code`\n  background: rgba(100, 100, 100, 0.5);\n  padding: 0 5px;\n  border-radius: 2px;\n`;\n\nexport const parseCode = (text: string) => {\n  const parts = text.split(/`/);\n\n  return parts.map((content, index) => {\n    if (index % 2 === 0) {\n      return <span key={index}>{content}</span>;\n    } else {\n      return <StyledCode key={index}>{content}</StyledCode>;\n    }\n  });\n};\n\nlet pageUrlMap: Map<Pages, string>;\n\nconst getTypeLinks = async () => {\n  if (!pageUrlMap) {\n    const pages = await getPageChildren(Pages.Types);\n    const map = new Map<Pages, string>();\n\n    for (let i = 0; i < pages.length; i++) {\n      const path = await getComponentUrl(pages[i]);\n\n      map.set(pages[i], `#${path}`);\n    }\n\n    pageUrlMap = map;\n  }\n\n  return pageUrlMap;\n};\n\nconst PropsTable: React.FC<{ props: PropsDefinition }> = ({ props = [] }) => {\n  const [types, setTypes] = useState<Map<Pages, string>>();\n\n  useEffect(() => {\n    getTypeLinks().then(setTypes);\n  }, []);\n\n  return (\n    <Block>\n      <StyledTableContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Required</th>\n              <th>Type</th>\n              <th>Default</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.map((prop, index) => {\n              return (\n                <tr key={index}>\n                  <td>{prop[0]}</td>\n                  <td>{prop[1] ? <Icon f7={'checkmark_alt'} size={14} /> : null}</td>\n                  <td>\n                    <code>\n                      {types && types.has(prop[2] as Pages) ? (\n                        <StyledLink text={prop[2]} href={types.get(prop[2] as Pages)} external />\n                      ) : (\n                        prop[2]\n                      )}\n                    </code>\n                  </td>\n                  <td>\n                    <code>{prop[3]}</code>\n                  </td>\n                  <td>{parseCode(prop[4])}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </StyledTable>\n      </StyledTableContainer>\n    </Block>\n  );\n};\n\nexport default PropsTable;\n","import React, { useEffect, useState } from 'react';\nimport { getComponentUrl, Pages } from '../pages';\nimport { StyledComponentLink } from './StyledComponents';\n\nconst ComponentLink: React.FC<{ page: Pages; className?: string }> = ({ page, className }) => {\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    getComponentUrl(page).then((url) => setUrl(`#${url}`));\n  }, [page]);\n\n  return <StyledComponentLink className={className} href={url} key={page} text={page} external />;\n};\n\nexport default ComponentLink;\n","import { Block } from 'framework7-react';\nimport { LineStyle, PixiCanvas, PixiGraphics, Polygon, Point } from 'pixi-reactive';\nimport React from 'react';\nimport { Pages } from '../../pages';\nimport CodeViewer from '../CodeViewer';\nimport ComponentLink from '../ComponentLink';\nimport PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';\nimport { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';\n\nexport const shapeProps: PropsDefinition = [['name', false, 'string', 'null', 'Name or ID of the shape']];\n\nexport const PolygonExample: React.FC = () => {\n  return (\n    <PixiCanvas>\n      <PixiGraphics>\n        <Polygon>\n          <LineStyle color={0x00ff00} width={2} />\n          <Point x={20} y={20} />\n          <Point x={120} y={20} />\n          <Point x={70} y={170} />\n        </Polygon>\n      </PixiGraphics>\n    </PixiCanvas>\n  );\n};\n\nconst PolygonDoc: React.FC = () => {\n  return (\n    <>\n      <StyledTitle>Polygon</StyledTitle>\n      <StyledIntroduction>\n        It draws a polygon on the canvas. The shape is defined by a list of <ComponentLink page={Pages.Point} /> component that identify the{' '}\n        <StyledCode>x</StyledCode> and <StyledCode>y</StyledCode> coordinates of the polygon vertices.\n      </StyledIntroduction>\n      <Block style={{ height: 200 }}>\n        <PolygonExample />\n      </Block>\n      <Block>\n        <CodeViewer src={'./static/examples/PolygonExample.tsx'} />\n      </Block>\n      <StyledSectionTitle>Properties</StyledSectionTitle>\n      <PropsTable props={shapeProps} />\n    </>\n  );\n};\n\nexport default PolygonDoc;\n"],"sourceRoot":""}